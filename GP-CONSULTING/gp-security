#!/usr/bin/env python3
"""
GP-Security - Simple, Working Security CLI
Scan ‚Üí Find Issues ‚Üí Get Fixes

No AI hype, just practical security advice.
"""

import sys
import json
import argparse
from pathlib import Path
from datetime import datetime

# Add project paths (GP-CONSULTING is now parent directory)
sys.path.insert(0, str(Path(__file__).parent))
from remediation.security_advisor import SecurityAdvisor

def scan_project(target: str, scanners: list = None):
    """Run security scanners on a target"""
    target_path = Path(target).resolve()

    if not target_path.exists():
        print(f"‚ùå Target not found: {target}")
        return False

    print(f"üîç Scanning: {target_path}")
    print("-" * 60)

    # Default to all scanners if none specified
    if not scanners:
        scanners = ["bandit", "semgrep", "gitleaks", "trivy", "opa"]

    scanner_dir = Path(__file__).parent / "scanners"

    success_count = 0

    for scanner in scanners:
        scanner_script = scanner_dir / f"{scanner}_scanner.py"

        if scanner_script.exists():
            print(f"üîÑ Running {scanner}...")
            import subprocess
            try:
                result = subprocess.run([
                    sys.executable, str(scanner_script), str(target_path)
                ], capture_output=True, text=True, timeout=300)

                if result.returncode == 0:
                    print(f"‚úÖ {scanner} completed")
                    success_count += 1
                else:
                    print(f"‚ùå {scanner} failed: {result.stderr.strip()}")
            except subprocess.TimeoutExpired:
                print(f"‚è∞ {scanner} timed out")
            except Exception as e:
                print(f"‚ùå {scanner} error: {e}")
        else:
            print(f"‚ö†Ô∏è  {scanner} scanner not found")

    print(f"\nüìä Completed: {success_count}/{len(scanners)} scanners")
    return success_count > 0

def get_advice(target: str):
    """Get security advice for a scanned project"""
    advisor = SecurityAdvisor()

    print(f"üß† Analyzing security findings for: {target}")
    print("-" * 60)

    advice = advisor.provide_advice_for_project(target)

    if advice["summary"]["total_issues"] == 0:
        print("‚úÖ No security issues found!")
        return

    print(f"üìä Summary:")
    summary = advice["summary"]
    print(f"   Total Issues: {summary['total_issues']}")
    if summary['critical'] > 0:
        print(f"   üî¥ Critical: {summary['critical']}")
    if summary['high'] > 0:
        print(f"   üü† High: {summary['high']}")
    if summary['medium'] > 0:
        print(f"   üü° Medium: {summary['medium']}")
    if summary['low'] > 0:
        print(f"   üü¢ Low: {summary['low']}")

    print(f"\nüîß Remediation Advice:")
    print("=" * 60)

    issue_count = 0
    for scanner_name, scanner_results in advice["scanners"].items():
        recommendations = scanner_results.get("recommendations", [])
        if recommendations:
            print(f"\nüìã {scanner_name.upper()} Issues:")

            for rec in recommendations:
                issue_count += 1
                print(f"\n{issue_count}. {rec.get('issue')}")
                print(f"   üìç Location: {rec.get('file', rec.get('package', 'N/A'))}")
                if rec.get('line'):
                    print(f"   üìç Line: {rec.get('line')}")
                print(f"   ‚ö†Ô∏è  Severity: {rec.get('severity', 'unknown').upper()}")
                print(f"   üí• Risk: {rec.get('risk', 'Unknown')}")

                fix = rec.get('fix', 'No fix available')
                if fix and fix != 'No fix available':
                    print(f"   üîß Fix:")
                    # Clean up the fix text for display
                    fix_lines = fix.strip().split('\n')
                    for line in fix_lines[:10]:  # Show first 10 lines
                        print(f"      {line}")
                    if len(fix_lines) > 10:
                        print(f"      ... (see full report for complete fix)")

                if rec.get('references'):
                    print(f"   üìö References: {', '.join(rec['references'][:2])}")

                print()

    # Save detailed report
    report_dir = Path("/home/jimmie/linkops-industries/GP-copilot/GP-DATA/active/reports")
    report_dir.mkdir(exist_ok=True)
    report_file = report_dir / f"security_advice_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

    with open(report_file, 'w') as f:
        json.dump(advice, f, indent=2)

    print(f"üìù Detailed report saved: {report_file}")

def main():
    parser = argparse.ArgumentParser(
        description="GP-Security: Practical security scanning and advice",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  gp-security scan /path/to/project          # Scan with all tools
  gp-security scan /path/to/project -s bandit semgrep  # Specific scanners
  gp-security advice /path/to/project        # Get remediation advice
  gp-security scan-and-fix /path/to/project  # Scan then provide advice
        """
    )

    subparsers = parser.add_subparsers(dest='command', help='Commands')

    # Scan command
    scan_parser = subparsers.add_parser('scan', help='Run security scanners')
    scan_parser.add_argument('target', help='Target directory to scan')
    scan_parser.add_argument('-s', '--scanners', nargs='+',
                           choices=['bandit', 'semgrep', 'gitleaks', 'trivy', 'opa', 'checkov'],
                           help='Specific scanners to run')

    # Advice command
    advice_parser = subparsers.add_parser('advice', help='Get security advice')
    advice_parser.add_argument('target', help='Target directory to analyze')

    # Combined command
    combined_parser = subparsers.add_parser('scan-and-fix', help='Scan then provide advice')
    combined_parser.add_argument('target', help='Target directory to scan and analyze')
    combined_parser.add_argument('-s', '--scanners', nargs='+',
                                choices=['bandit', 'semgrep', 'gitleaks', 'trivy', 'opa', 'checkov'],
                                help='Specific scanners to run')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    print("üõ°Ô∏è  GP-Security - Practical Security Tool")
    print("=" * 60)

    if args.command == 'scan':
        scan_project(args.target, args.scanners)

    elif args.command == 'advice':
        get_advice(args.target)

    elif args.command == 'scan-and-fix':
        if scan_project(args.target, args.scanners):
            print()
            get_advice(args.target)

    print("\n‚úÖ GP-Security completed")

if __name__ == "__main__":
    main()