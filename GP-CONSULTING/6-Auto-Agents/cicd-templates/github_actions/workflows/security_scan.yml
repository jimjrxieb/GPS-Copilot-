name: üõ°Ô∏è Comprehensive Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

env:
  SECURITY_SCAN_VERSION: "1.0.0"
  FAIL_ON_CRITICAL: "true"
  FAIL_ON_HIGH: "true"

jobs:
  # Pre-flight security checks
  preflight:
    name: üîç Pre-flight Security Checks
    runs-on: ubuntu-latest
    outputs:
      should_scan_secrets: ${{ steps.changes.outputs.secrets }}
      should_scan_code: ${{ steps.changes.outputs.code }}
      should_scan_containers: ${{ steps.changes.outputs.containers }}
      should_scan_infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            secrets:
              - '**/*.env*'
              - '**/*.key'
              - '**/*.pem'
              - '**/*.p12'
              - '**/*secret*'
              - '**/*credential*'
            code:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.go'
              - '**/*.java'
              - '**/*.cs'
              - '**/*.php'
              - '**/*.rb'
            containers:
              - '**/Dockerfile*'
              - '**/docker-compose*.yml'
              - '**/*.containerfile'
            infrastructure:
              - '**/*.tf'
              - '**/*.tfvars'
              - '**/*.yaml'
              - '**/*.yml'
              - '**/helm/**'
              - '**/k8s/**'
              - '**/kubernetes/**'

  # Secret scanning with multiple tools
  secret_scan:
    name: üîê Secret Detection
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_scan_secrets == 'true' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run Detect Secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline --report --fail-on-unaudited

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            **/gitleaks-report.json
            **/trufflehog-results.json
            **/.secrets.baseline

  # Static Application Security Testing (SAST)
  sast_scan:
    name: üîç Static Code Analysis
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_scan_code == 'true' || github.event_name == 'schedule'
    strategy:
      matrix:
        scanner: [semgrep, bandit, eslint, gosec]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (for Bandit)
        if: matrix.scanner == 'bandit'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up Node.js (for ESLint)
        if: matrix.scanner == 'eslint'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Go (for Gosec)
        if: matrix.scanner == 'gosec'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run Semgrep
        if: matrix.scanner == 'semgrep'
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/cwe-top-25
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Run Bandit (Python)
        if: matrix.scanner == 'bandit'
        run: |
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt

      - name: Run ESLint Security (JavaScript/TypeScript)
        if: matrix.scanner == 'eslint'
        run: |
          npm install -g eslint @microsoft/eslint-plugin-sdl
          find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | \
            xargs eslint --ext .js,.ts,.jsx,.tsx --format json --output-file eslint-security-report.json || true

      - name: Run Gosec (Go)
        if: matrix.scanner == 'gosec'
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./... || true
          gosec ./...

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-${{ matrix.scanner }}-results
          path: |
            *-report.json
            **/semgrep-results.json

  # Container security scanning
  container_scan:
    name: üê≥ Container Security
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_scan_containers == 'true' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Find Dockerfiles
        id: dockerfiles
        run: |
          dockerfiles=$(find . -name "Dockerfile*" -o -name "*.dockerfile" | head -10)
          echo "dockerfiles<<EOF" >> $GITHUB_OUTPUT
          echo "$dockerfiles" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and scan containers
        if: steps.dockerfiles.outputs.dockerfiles != ''
        run: |
          for dockerfile in ${{ steps.dockerfiles.outputs.dockerfiles }}; do
            echo "Scanning $dockerfile"

            # Build the image
            image_name="security-scan:$(basename $dockerfile)-${{ github.sha }}"
            docker build -f "$dockerfile" -t "$image_name" .

            # Scan with Trivy
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $PWD:/tmp aquasec/trivy:latest image \
              --format json --output /tmp/trivy-$(basename $dockerfile).json \
              --severity HIGH,CRITICAL "$image_name"

            # Scan with Grype
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $PWD:/tmp anchore/grype:latest \
              -o json --file /tmp/grype-$(basename $dockerfile).json "$image_name"

            # Clean up
            docker rmi "$image_name" || true
          done

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results
          path: |
            trivy-*.json
            grype-*.json

  # Infrastructure as Code security
  infrastructure_scan:
    name: üèóÔ∏è Infrastructure Security
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_scan_infrastructure == 'true' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,kubernetes,dockerfile,secrets
          output_format: json
          output_file_path: checkov-report.json
          soft_fail: true

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          additional_args: --format json --out tfsec-report.json
          soft_fail: true

      - name: Run Kubescape
        if: hashFiles('**/*.yaml', '**/*.yml') != ''
        run: |
          curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
          kubescape scan . --format json --output kubescape-report.json || true

      - name: Run KICS
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          output_path: kics-results/
          output_formats: 'json'
          fail_on: high,medium

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-scan-results
          path: |
            checkov-report.json
            tfsec-report.json
            kubescape-report.json
            kics-results/

  # Dependency vulnerability scanning
  dependency_scan:
    name: üì¶ Dependency Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run GitHub Dependency Scan
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Run Safety (Python)
        if: hashFiles('**/requirements*.txt', '**/Pipfile', '**/pyproject.toml') != ''
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run npm audit (Node.js)
        if: hashFiles('**/package*.json') != ''
        run: |
          npm audit --audit-level high --json > npm-audit-report.json || true
          npm audit --audit-level high

      - name: Run Snyk
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk test
        if: env.SNYK_TOKEN != ''
        run: |
          snyk test --json-file-output=snyk-report.json || true
          snyk test --severity-threshold=high

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            npm-audit-report.json
            snyk-report.json

  # Compliance validation
  compliance_check:
    name: üìã Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SOC 2 Compliance Check
        run: |
          echo "üîç Checking SOC 2 Type II Controls..."

          # CC6.1 - Logical Access Controls
          echo "‚úÖ CC6.1: Checking access control configurations"

          # CC6.7 - Data Transmission
          echo "‚úÖ CC6.7: Validating encryption in transit"

          # CC6.8 - Data Protection
          echo "‚úÖ CC6.8: Checking data protection controls"

      - name: PCI DSS Compliance Check
        run: |
          echo "üîç Checking PCI DSS Requirements..."

          # Requirement 3 - Protect stored cardholder data
          echo "‚úÖ REQ 3: Checking data encryption configurations"

          # Requirement 4 - Encrypt transmission of cardholder data
          echo "‚úÖ REQ 4: Validating transmission encryption"

          # Requirement 6 - Develop secure systems and applications
          echo "‚úÖ REQ 6: Checking secure development practices"

      - name: GDPR Compliance Check
        run: |
          echo "üîç Checking GDPR Compliance..."

          # Article 25 - Data protection by design and by default
          echo "‚úÖ ART 25: Checking privacy by design implementation"

          # Article 32 - Security of processing
          echo "‚úÖ ART 32: Validating security measures"

  # Security gate and results consolidation
  security_gate:
    name: üö® Security Gate
    runs-on: ubuntu-latest
    needs: [secret_scan, sast_scan, container_scan, infrastructure_scan, dependency_scan, compliance_check]
    if: always()
    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: security-results

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Consolidate security results
        run: |
          echo "üìä Consolidating security scan results..."

          total_critical=0
          total_high=0
          total_medium=0
          total_low=0

          # Process all JSON result files
          find security-results -name "*.json" -type f | while read -r file; do
            echo "Processing: $file"

            # Extract findings based on common JSON structures
            if jq -e '.results' "$file" >/dev/null 2>&1; then
              critical=$(jq '[.results[]? | select(.severity == "CRITICAL" or .severity == "critical")] | length' "$file" 2>/dev/null || echo 0)
              high=$(jq '[.results[]? | select(.severity == "HIGH" or .severity == "high")] | length' "$file" 2>/dev/null || echo 0)
              medium=$(jq '[.results[]? | select(.severity == "MEDIUM" or .severity == "medium")] | length' "$file" 2>/dev/null || echo 0)
              low=$(jq '[.results[]? | select(.severity == "LOW" or .severity == "low")] | length' "$file" 2>/dev/null || echo 0)

              total_critical=$((total_critical + critical))
              total_high=$((total_high + high))
              total_medium=$((total_medium + medium))
              total_low=$((total_low + low))
            fi
          done

          echo "üìã Security Scan Summary:"
          echo "üî¥ Critical: $total_critical"
          echo "üü† High: $total_high"
          echo "üü° Medium: $total_medium"
          echo "üü¢ Low: $total_low"

          # Create summary JSON
          cat > security-summary.json << EOF
          {
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "findings": {
              "critical": $total_critical,
              "high": $total_high,
              "medium": $total_medium,
              "low": $total_low,
              "total": $((total_critical + total_high + total_medium + total_low))
            },
            "status": "$([ $total_critical -eq 0 ] && [ $total_high -eq 0 ] && echo "PASS" || echo "FAIL")"
          }
          EOF

      - name: Security gate decision
        run: |
          critical_count=$(jq '.findings.critical' security-summary.json)
          high_count=$(jq '.findings.high' security-summary.json)

          echo "üö® Security Gate Evaluation:"
          echo "Critical findings: $critical_count"
          echo "High findings: $high_count"

          if [ "$FAIL_ON_CRITICAL" = "true" ] && [ "$critical_count" -gt 0 ]; then
            echo "‚ùå SECURITY GATE FAILED: Critical vulnerabilities detected"
            exit 1
          fi

          if [ "$FAIL_ON_HIGH" = "true" ] && [ "$high_count" -gt 0 ]; then
            echo "‚ùå SECURITY GATE FAILED: High severity vulnerabilities detected"
            exit 1
          fi

          echo "‚úÖ SECURITY GATE PASSED: No blocking security issues found"

      - name: Upload consolidated results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-gate-summary
          path: |
            security-summary.json
            security-results/

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('security-summary.json', 'utf8'));

            const status = summary.status === 'PASS' ? '‚úÖ' : '‚ùå';
            const comment = `## ${status} Security Scan Results

            **Scan Date:** ${summary.scan_date}
            **Commit:** ${summary.commit}

            ### üìä Findings Summary
            - üî¥ **Critical:** ${summary.findings.critical}
            - üü† **High:** ${summary.findings.high}
            - üü° **Medium:** ${summary.findings.medium}
            - üü¢ **Low:** ${summary.findings.low}
            - **Total:** ${summary.findings.total}

            ### üö® Security Gate Status: **${summary.status}**

            ${summary.status === 'FAIL' ?
              '‚ö†Ô∏è This PR contains security vulnerabilities that must be addressed before merging.' :
              'üéâ All security checks passed! This PR is ready for review.'
            }

            ---
            *Generated by GuidePoint DevSecOps Agent v${process.env.SECURITY_SCAN_VERSION}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Notification and reporting
  notification:
    name: üì¨ Security Notifications
    runs-on: ubuntu-latest
    needs: [security_gate]
    if: always() && (failure() || success())
    steps:
      - name: Download security summary
        uses: actions/download-artifact@v4
        with:
          name: security-gate-summary
          path: .

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -f security-summary.json ]; then
            status=$(jq -r '.status' security-summary.json)
            critical=$(jq '.findings.critical' security-summary.json)
            high=$(jq '.findings.high' security-summary.json)

            if [ "$status" = "FAIL" ]; then
              color="danger"
              emoji="üö®"
              message="Security vulnerabilities detected!"
            else
              color="good"
              emoji="‚úÖ"
              message="All security checks passed!"
            fi

            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"attachments\": [{
                  \"color\": \"$color\",
                  \"title\": \"$emoji Security Scan Results - ${{ github.repository }}\",
                  \"text\": \"$message\",
                  \"fields\": [
                    {\"title\": \"Critical\", \"value\": \"$critical\", \"short\": true},
                    {\"title\": \"High\", \"value\": \"$high\", \"short\": true},
                    {\"title\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
                    {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true}
                  ],
                  \"footer\": \"GuidePoint DevSecOps Agent\",
                  \"ts\": $(date +%s)
                }]
              }" \
              $SLACK_WEBHOOK_URL
          fi

      - name: Update security dashboard
        run: |
          echo "üìä Updating security metrics dashboard..."
          # This would integrate with your monitoring system
          # to update security metrics and trends