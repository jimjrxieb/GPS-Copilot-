{"instruction": "Design an Internal Developer Portal (IDP) structure that supports microservices and platform teams", "input": "", "output": "```markdown\nAn effective IDP for a microservices organization should include:\n\n1. **Service Catalog**: Auto-populated from Git repositories with metadata (e.g., owner, runtime, version, deployment status).\n2. **Golden Path Templates**: Standardized templates for onboarding, deploying, and monitoring services.\n3. **Self-Service Workflows**: GitHub Actions-based automations for provisioning databases, requesting secrets, etc.\n4. **RBAC-aware Interfaces**: Integrations with LDAP or OIDC for team-based permissions.\n5. **Tech Radar + Scorecards**: For guidance and governance on tech adoption.\n\nTools: Port.io (IDP), Backstage (alternative), ArgoCD, GitHub Actions, Keycloak, Terraform.\n```"}
{"instruction": "Create a Golden Path template for deploying a Python microservice to Kubernetes using Helm and GitOps", "input": "", "output": "```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: python-service-dev\nspec:\n  project: default\n  source:\n    repoURL: 'https://github.com/org/python-service'\n    targetRevision: HEAD\n    path: helm/\n    helm:\n      valueFiles:\n        - values-dev.yaml\n  destination:\n    server: 'https://kubernetes.default.svc'\n    namespace: dev\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n```"}
{"instruction": "Integrate Trivy vulnerability scanning into a GitHub Actions CI pipeline", "input": "", "output": "```yaml\nname: CI Security Scan\non: [push, pull_request]\njobs:\n  trivy-scan:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run Trivy\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'ghcr.io/org/app:latest'\n          format: 'table'\n          exit-code: '1'\n```"}
{"instruction": "Automate creation of Airflow DAGs from YAML spec via the IDP", "input": "", "output": "```python\n# generate_dag.py\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator\nimport yaml\nfrom datetime import datetime\n\nwith open('pipeline_spec.yaml') as f:\n    config = yaml.safe_load(f)\n\ndef run_task(**kwargs):\n    print(\"Running\", kwargs['task_name'])\n\ndag = DAG(\n    config['dag_id'],\n    start_date=datetime(2024, 1, 1),\n    schedule_interval=config['schedule']\n)\n\nfor task in config['tasks']:\n    PythonOperator(\n        task_id=task['name'],\n        python_callable=run_task,\n        op_kwargs={'task_name': task['name']},\n        dag=dag\n    )\n```"}
{"instruction": "Troubleshoot a failing ArgoCD sync that is stuck in 'OutOfSync' state", "input": "Symptoms: Sync fails, Argo UI shows 'OutOfSync', logs indicate Helm value mismatch.", "output": "```markdown\nTroubleshooting Steps:\n\n1. **Check ArgoCD Logs**: Run `kubectl logs -n argocd deployment/argocd-repo-server`\n2. **Validate Helm Values**:\n   - Compare `values.yaml` in repo vs live config in `kubectl get deployment -o yaml`\n   - Look for immutable fields like `volumeClaimTemplates`\n3. **Manual Diff**: Use ArgoCD UI \u2192 App \u2192 Diff tab\n4. **Fix Config Drift**: Rebase `values.yaml`, commit and push\n5. **Force Sync**: `argocd app sync <app-name> --force`\n```"}
{"instruction": "Generate RBAC policy for namespace-level developer access", "input": "Developers need access to deploy but not manage system components.", "output": "```yaml\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: dev\n  name: dev-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"services\", \"deployments\"]\n    verbs: [\"get\", \"watch\", \"list\", \"create\", \"update\", \"patch\", \"delete\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: dev-role-binding\n  namespace: dev\nsubjects:\n  - kind: Group\n    name: developers\n    apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: dev-role\n  apiGroup: rbac.authorization.k8s.io\n```"}
{"instruction": "Set up a GitLab CI/CD pipeline that deploys to Kubernetes using Kubeconfig stored in CI variables", "input": "", "output": "```yaml\nstages:\n  - build\n  - deploy\n\nbuild:\n  stage: build\n  script:\n    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .\n    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG\n\ndeploy:\n  stage: deploy\n  image: bitnami/kubectl\n  script:\n    - echo \"$KUBECONFIG_CONTENT\" > kubeconfig\n    - export KUBECONFIG=$CI_PROJECT_DIR/kubeconfig\n    - kubectl apply -f k8s/\n  only:\n    - main\n```"}
{"instruction": "Embed developer documentation directly into IDP using Markdown and OpenAPI integration", "input": "", "output": "```markdown\n### Example Developer Service Docs\n\n**Overview:**\nThis service exposes a REST API to fetch user analytics.\n\n**OpenAPI Spec:**\nUse `/openapi.yaml` as the source of truth. Preview it using Swagger-UI plugin in IDP.\n\n**Deployment Instructions:**\n```bash\ngit clone https://github.com/org/analytics-service\ncd analytics-service && helm upgrade --install analytics .\n```\n```"}
{"instruction": "Configure Port.io to automatically onboard new GitHub repositories as services", "input": "", "output": "```yaml\n# port.yaml\nblueprint: service\nproperties:\n  repo: github.com/org/{{ repo.name }}\n  team: {{ repo.team }}\nautomations:\n  - on: github.repository.created\n    action: port.create_entity\n    payload:\n      blueprint: service\n      properties:\n        repo: github.com/{{ repo.name }}\n        team: {{ repo.team }}\n```"}
{"instruction": "Implement ServiceNow automation to open incidents from failing pipeline jobs", "input": "", "output": "```python\nimport requests\n\ndef open_incident(job_name, failure_reason):\n    url = \"https://servicenow.company.com/api/now/table/incident\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer $SERVICENOW_TOKEN\"\n    }\n    payload = {\n        \"short_description\": f\"CI/CD failure: {job_name}\",\n        \"description\": failure_reason,\n        \"urgency\": \"2\",\n        \"impact\": \"2\"\n    }\n    response = requests.post(url, json=payload, headers=headers)\n    return response.status_code\n```"}
