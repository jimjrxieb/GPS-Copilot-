#!/usr/bin/env python3
"""
Test JADE's ability to create Gatekeeper constraint templates
Direct test using JADE components
"""

import sys
from pathlib import Path
import time

# Add paths for JADE components
sys.path.append(str(Path(__file__).parent / "GP-RAG"))
sys.path.append(str(Path(__file__).parent / "GP-AI"))

def test_direct_jade():
    """Test JADE directly without API"""
    print("\nüß™ Direct JADE Test - Gatekeeper Constraint Templates")
    print("=" * 60)

    try:
        from jade_live import JadeSecurityConsultant

        print("ü§ñ Initializing JADE...")
        jade = JadeSecurityConsultant()

        # Test query
        query = "Create a Gatekeeper constraint template that denies containers running as root user, and also create the corresponding constraint that enforces this policy"

        print(f"\nüìù Query: {query}")
        print("-" * 60)

        # Search knowledge base
        print("\nüîç Searching knowledge base...")
        docs = jade.search_knowledge(query, k=5)
        print(f"   Found {len(docs)} relevant documents")

        # Analyze context
        context = jade.analyze_security_context(query)
        print(f"   Domains: {', '.join(context['domains'])}")
        print(f"   Tools mentioned: {', '.join(context['tools_mentioned']) if context['tools_mentioned'] else 'None'}")

        # Generate response
        print("\nü§ñ JADE is generating response...")
        response = jade.generate_response(query, docs, context)

        print("\n" + "=" * 60)
        print("JADE's Response:")
        print("=" * 60)
        print(response)

        # Save response to file
        output_file = Path("jade_gatekeeper_template_output.yaml")
        with open(output_file, "w") as f:
            f.write(f"# Query: {query}\n")
            f.write(f"# Generated by JADE on {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(response)

        print(f"\nüíæ Response saved to: {output_file}")

    except ImportError as e:
        print(f"‚ùå Failed to import JADE components: {e}")
        print("\nüìù Generating example template instead...")
        generate_example_template()

    except Exception as e:
        print(f"‚ùå Error during test: {e}")
        import traceback
        traceback.print_exc()

def generate_example_template():
    """Generate an example Gatekeeper template if JADE is not available"""

    template = """
# ConstraintTemplate: Deny Root Containers
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sdenyroot
  annotations:
    description: "Denies containers running as root user (UID 0)"
spec:
  crd:
    spec:
      names:
        kind: K8sDenyRoot
      validation:
        openAPIV3Schema:
          type: object
          properties:
            message:
              type: string
            exemptImages:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sdenyroot

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          user_is_root(container)
          not is_exempt(container.image)
          msg := sprintf("Container %s is configured to run as root", [container.name])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          user_is_root(container)
          not is_exempt(container.image)
          msg := sprintf("Init container %s is configured to run as root", [container.name])
        }

        user_is_root(container) {
          container.securityContext.runAsUser == 0
        }

        user_is_root(container) {
          container.securityContext.runAsNonRoot == false
        }

        user_is_root(container) {
          not container.securityContext.runAsUser
          not container.securityContext.runAsNonRoot
          not input.review.object.spec.securityContext.runAsUser
          not input.review.object.spec.securityContext.runAsNonRoot
        }

        is_exempt(image) {
          exempt_images := input.parameters.exemptImages[_]
          image == exempt_images
        }

---
# Constraint: Enforce No Root Policy
apiVersion: k8sdenyroot.constraints.gatekeeper.sh/v1beta1
kind: K8sDenyRoot
metadata:
  name: no-root-containers
spec:
  enforcementAction: deny
  match:
    kinds:
    - apiGroups: ["", "apps"]
      kinds: ["Pod", "Deployment", "StatefulSet", "DaemonSet"]
    namespaces:
    - production
    - staging
    excludedNamespaces:
    - kube-system
    - gatekeeper-system
  parameters:
    message: "Running containers as root is not allowed in this namespace"
    exemptImages:
    - "gcr.io/google-containers/*"
"""

    print(template)

    # Save to file
    output_file = Path("example_gatekeeper_template.yaml")
    with open(output_file, "w") as f:
        f.write(template)

    print(f"\nüíæ Example template saved to: {output_file}")

def test_with_api():
    """Test via API if running"""
    import requests
    import json

    print("\nüåê Testing via JADE API...")

    try:
        response = requests.get("http://localhost:5000/health", timeout=2)
        if response.status_code != 200:
            print("‚ö†Ô∏è API not responding")
            return False
    except:
        print("‚ö†Ô∏è API not available at http://localhost:5000")
        return False

    query = "Create a Gatekeeper ConstraintTemplate that denies root containers and the Constraint to enforce it"

    try:
        response = requests.post(
            "http://localhost:5000/query",
            json={"query": query},
            timeout=30
        )

        if response.status_code == 200:
            result = response.json()
            print("\nü§ñ API Response received")
            print("=" * 60)
            print(result['response'])
            return True
        else:
            print(f"‚ùå API Error: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå API request failed: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ JADE Gatekeeper Template Test")
    print("=" * 60)

    # Try API first
    if not test_with_api():
        # Fall back to direct test
        test_direct_jade()