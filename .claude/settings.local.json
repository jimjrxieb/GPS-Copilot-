{
  "permissions": {
    "allow": [
      "Read(//home/jimmie/linkops-industries/James-OS/**)",
      "Bash(bandit:*)",
      "Bash(trivy fs:*)",
      "Bash(xargs:*)",
      "Bash(gitleaks detect:*)",
      "Read(//home/jimmie/linkops-industries/**)",
      "Bash(python:*)",
      "Bash(chmod:*)",
      "Bash(python3:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Read(//home/jimmie/.cache/huggingface/hub/models--Qwen--Qwen2.5-7B-Instruct/snapshots/**)",
      "Bash(timeout:*)",
      "Bash(tree:*)",
      "Bash(npm install)",
      "Bash(npm run dev:*)",
      "Bash(mkdir:*)",
      "Bash(./gp-security advice /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/DVWA)",
      "Bash(./gp-security advice /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/INTERVIEW-DEMO)",
      "Bash(./gp-security scan /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/INTERVIEW-DEMO -s bandit trivy)",
      "Bash(kubectl apply:*)",
      "Read(//home/jimmie/.cache/huggingface/hub/**)",
      "Bash(pkill:*)",
      "Bash(find:*)",
      "Bash(cat:*)",
      "Bash(opa eval:*)",
      "Bash(opa test:*)",
      "Bash(ln:*)",
      "Bash(grep:*)",
      "Bash(kubectl explain:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose ps:*)",
      "Bash(docker-compose:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Read(//home/jimmie/**)",
      "Bash(if [ -f .env ])",
      "Bash(then grep -E \"^GH_\" .env)",
      "Bash(else echo \".env not found\")",
      "Bash(fi)",
      "Bash(awk:*)",
      "Bash(git rm:*)",
      "Bash(git filter-branch:*)",
      "Bash(git reflog:*)",
      "Bash(git gc:*)",
      "Bash(git fetch:*)",
      "Bash(git reset:*)",
      "Read(//tmp/**)",
      "Bash(./bin/gitleaks detect --source . --report-path /tmp/gp-copilot-gitleaks.json --no-git)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/bandit_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/DVWA)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/semgrep_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/DVWA)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/trivy_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/DVWA)",
      "Bash(PYTHONPATH=james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/bandit_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/DVWA)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/bandit_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/DVWA)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/semgrep_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/DVWA)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/trivy_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/DVWA)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-RAG/jade_orchestrator.py)",
      "Bash(export PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/bandit_scanner.py GP-PROJECTS/DVWA)",
      "Bash(cp:*)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/bandit_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/LinkOps-MLOps)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/semgrep_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/LinkOps-MLOps)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/trivy_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/LinkOps-MLOps)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/gitleaks_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/LinkOps-MLOps detect)",
      "Bash(for:*)",
      "Bash(do grep -q \"python-jose\" \"$file\")",
      "Bash(echo \"$file\")",
      "Bash(done)",
      "Bash(do sed -i 's/python-jose\\[cryptography\\]==3\\.3\\.0/python-jose[cryptography]==3.4.0  # Updated to fix CVE-2024-33663 (CRITICAL) and CVE-2024-33664 (MEDIUM)/' \"$file\")",
      "Bash(jq:*)",
      "Bash(bash:*)",
      "Bash(tee:*)",
      "Bash(nvidia-smi:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(./jade.py rag:*)",
      "Bash(node:*)",
      "Bash(/home/jimmie/linkops-industries/GP-copilot/GP-CONSULTING-AGENTS/GP-POL-AS-CODE/guidepoint-standards/opa-policies/)",
      "Bash(/home/jimmie/linkops-industries/GP-copilot/GP-CONSULTING-AGENTS/GP-POL-AS-CODE/guidepoint-standards/terraform-modules/)",
      "Bash(/home/jimmie/linkops-industries/GP-copilot/GP-CONSULTING-AGENTS/GP-POL-AS-CODE/guidepoint-standards/)",
      "Bash(export:*)",
      "Bash(./start_gp_copilot.sh:*)",
      "Bash(curl:*)",
      "Bash(netstat:*)",
      "Bash(ss:*)",
      "Bash(echo $DISPLAY)",
      "Bash(huggingface-cli download:*)",
      "Bash(lsof:*)",
      "Bash(uvicorn:*)",
      "Bash(terraform version)",
      "Bash(opa version:*)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python GP-CONSULTING-AGENTS/GP-POL-AS-CODE/2-AUTOMATION/scanners/opa_scanner.py GP-PROJECTS/Terraform_CICD_Setup terraform-security)",
      "Bash(tar:*)",
      "Bash(/home/jimmie/linkops-industries/GP-copilot/bin/conftest --version)",
      "Bash(bin/conftest:*)",
      "Bash(./gp-security:*)",
      "Bash(bin/jade:*)",
      "Bash(/tmp/test_jade_chat.sh:*)",
      "Bash(echo $PATH)",
      "Bash(jade:*)",
      "Bash(/tmp/test_jade_list_projects.sh)",
      "Bash(readlink:*)",
      "Bash(/tmp/test_jade_help.sh:*)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH ./gp-security scan GP-PROJECTS/Terraform_CICD_Setup -s trivy bandit)",
      "Bash(rmdir:*)",
      "Bash(git -C GP-RAG status)",
      "Bash(./test_jade_chat.sh:*)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python GP-CONSULTING-AGENTS/scanners/bandit_scanner.py GP-PROJECTS/LinkOps-MLOps)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/GP-POL-AS-CODE/2-AUTOMATION/scanners/opa_scanner.py GP-PROJECTS/Terraform_CICD_Setup terraform-security)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/trivy_scanner.py GP-PROJECTS/LinkOps-MLOps)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/gitleaks_scanner.py GP-PROJECTS/LinkOps-MLOps detect)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING-AGENTS/scanners/semgrep_scanner.py GP-PROJECTS/LinkOps-MLOps)",
      "Bash(/tmp/test_jade_show_results.sh:*)",
      "Bash(./GP-TESTING-VAL/quick_jade_test.sh:*)",
      "Bash(ARCHITECTURE_CLARIFICATION.md )",
      "Bash(CLEANUP_AND_INTEGRATION_PLAN.md )",
      "Bash(CLEANUP_COMPLETE.md )",
      "Bash(GP-COPILOT_FUNCTIONAL.md )",
      "Bash(GUIDEPOINT_STANDARDS_SUMMARY.md )",
      "Bash(JADE_KNOWLEDGE_VALIDATED.md )",
      "Bash(JADE_OBSERVABILITY_COMPLETE.md )",
      "Bash(JADE_TESTING_COMPLETE.md )",
      "Bash(MODEL_UPGRADE.md )",
      "Bash(RAG_ARCHITECTURE.md )",
      "Bash(GP-DOCS/architecture/)",
      "Bash(JADE_CHAT_READY.md )",
      "Bash(JADE_CHAT_SUMMARY.md )",
      "Bash(JADE_USAGE.md )",
      "Bash(QUICK_START.md )",
      "Bash(PREFLIGHT_CHECKLIST.md )",
      "Bash(GP-DOCS/guides/)",
      "Bash(gh:*)",
      "Bash(if [ -f \"/home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/CLOUD-project/Dockerfile\" ])",
      "Bash(then)",
      "Bash(else)",
      "Bash(if [ -f ~/.jade/evidence.jsonl ])",
      "Bash(then echo \"=== Evidence in ~/.jade/evidence.jsonl ===\")",
      "Bash(if [ -f ~/linkops-industries/GP-copilot/GP-DATA/active/audit/jade-gha-evidence.jsonl ])",
      "Bash(then echo \"=== Evidence in GP-DATA ===\")",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING/scanners/trivy_scanner.py GP-PROJECTS/CLOUD-project)",
      "Bash(/home/jimmie/linkops-industries/GP-copilot/GP-CONSULTING-AGENTS/GP-devsecops/auto_fix_pipeline.sh jimjrxieb/CLOUD-project)",
      "Bash(pip list:*)",
      "Bash(if [ -x \"$tool\" ])",
      "Bash(then \"$tool\" --version)",
      "Bash(\"$tool\" version)",
      "Bash(cd:*)",
      "Bash(tfsec:*)",
      "Bash(kubescape version:*)",
      "Bash(checkov:*)",
      "Bash(touch:*)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot:$PYTHONPATH python test_rag_graph_integration.py)",
      "Bash(docker build:*)",
      "Bash(pytest:*)",
      "Bash(/dev/null echo \"\" echo \"Code only (excluding .git):\" du -sh --exclude=.git . 2)",
      "Bash(/dev/null echo \"\" echo \"Breakdown of largest directories:\" du -sh *)",
      "Bash(./baseline_test.sh:*)",
      "Bash(PYTHONPATH=GP-PLATFORM:$PYTHONPATH ./bin/jade stats)",
      "Bash(./bin/jade:*)",
      "Bash(../../bin/trivy fs --scanners vuln --severity HIGH,CRITICAL .)",
      "Bash(./bin/trivy:*)",
      "Bash(./bin/opa:*)",
      "Bash(CUDA_VISIBLE_DEVICES=\"\" python ingest_jade_knowledge.py)",
      "Bash(rsync:*)",
      "Bash(ls:*)",
      "Bash(sqlite3:*)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(/home/jimmie/linkops-industries/GP-copilot/GP-CONSULTING/secops/3-fixers/ci-fixes/fix-hardcoded-secrets.sh)",
      "Bash(PROJECT_ROOT=/home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project bash /home/jimmie/linkops-industries/GP-copilot/GP-CONSULTING/secops/3-fixers/ci-fixes/fix-hardcoded-secrets.sh)",
      "Bash(/home/jimmie/linkops-industries/GP-copilot/GP-CONSULTING/secops/3-fixers/cd-fixes/fix-k8s-hardcoded-secrets.sh /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(PYTHONPATH=../../../GP-PLATFORM/james-config:$PYTHONPATH python3 gitleaks_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project detect)",
      "Bash(PYTHONPATH=../../../GP-PLATFORM/james-config:$PYTHONPATH python3 gitleaks_scanner.py --target /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project --no-git)",
      "Bash(PYTHONPATH=../../../GP-PLATFORM/james-config:$PYTHONPATH python3 bandit_scanner.py --target /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/GP-PLATFORM/james-config:$PYTHONPATH python3 bandit_scanner.py --target /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/GP-PLATFORM/james-config:$PYTHONPATH python3 bandit_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/GP-PLATFORM/james-config:$PYTHONPATH python3 semgrep_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/GP-PLATFORM/james-config:$PYTHONPATH python3 semgrep_scanner.py --target /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/GP-PLATFORM/james-config:$PYTHONPATH python3 checkov_scanner.py --target /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/GP-PLATFORM/james-config:$PYTHONPATH python3 trivy_scanner.py --target /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(set -a)",
      "Bash(set +a)",
      "Bash(docker inspect:*)",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(du:*)",
      "Bash(do if [ -d \"$pattern\" ])",
      "Bash(then cp -r \"$pattern\" /home/jimmie/linkops-industries/GP-copilot/GP-CONSULTING/3-Hardening/cloud-patterns/)",
      "Bash(do if [ -d \"$dir\" ])",
      "Bash(then echo \"Empty: $dir\")",
      "Bash(kubectl:*)",
      "Bash(conftest test:*)",
      "Bash(docker context:*)",
      "Bash(kind get:*)",
      "Bash(docker ps:*)",
      "Bash(echo \"# To switch to Docker Desktop Kubernetes:\nkubectl config use-context docker-desktop\n\n# Then redeploy:\nkubectl create namespace securebank\nkubectl apply -f /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project/infrastructure/k8s/deployment-local.yaml\n\n# Switch back to kind:\nkubectl config use-context kind-securebank\")",
      "Bash(docker exec:*)",
      "Bash(kind load:*)",
      "Bash(docker run:*)",
      "Bash(npm install:*)",
      "Bash(./GP-CONSULTING/gp-security workflow GP-PROJECTS/FINANCE-project)",
      "Bash(./GP-CONSULTING/gp-security:*)",
      "Bash(fuser:*)",
      "Bash(killall:*)",
      "Bash(git tag:*)",
      "Bash(git checkout:*)",
      "Bash(/home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project/start-portforwards.sh:*)",
      "Bash(kind delete cluster:*)",
      "Bash(PYTHONPATH=GP-PLATFORM/james-config:$PYTHONPATH python3 GP-CONSULTING/scanners/bandit_scanner.py /home/jimmie/linkops-industries/GP-copilot/GP-PROJECTS/FINANCE-project)",
      "Bash(git log:*)",
      "Bash(CUDA_VISIBLE_DEVICES=\"\" python3:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(do [ -f \"$file\" ])",
      "Bash(echo:*)",
      "Bash(PYTHONPATH=/home/jimmie/linkops-industries/GP-copilot/GP-Backend/james-config:$PYTHONPATH python:*)",
      "Bash(bin/gitleaks version:*)",
      "Bash(bin/tfsec:*)",
      "Bash(bin/kubescape version:*)",
      "Bash(FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch:*)",
      "Bash(git for-each-ref:*)",
      "Bash(git update-ref:*)"
    ],
    "deny": [],
    "ask": []
  }
}
