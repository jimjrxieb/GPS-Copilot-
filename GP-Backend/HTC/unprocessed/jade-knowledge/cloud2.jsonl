{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Write a Bash script to list out-of-sync ArgoCD applications."},{"role":"assistant":"#!/bin/bash\n\n# List out-of-sync ArgoCD apps\nargocd app list --output json | jq -r '.items[] | select(.sync.status != \"Synced\") | .metadata.name'\n\n# Usage: ./list-unsynced.sh\n# Output: app1 app2\n\n# Requires argocd CLI and jq installed."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bash script to sync a specific ArgoCD application."},{"role":"assistant":"#!/bin/bash\n\nAPP_NAME=$1\n\nif [ -z \"$APP_NAME\" ]; then\n  echo \"Usage: $0 <app-name>\"\n  exit 1\nfi\n\nargocd app sync $APP_NAME --prune --resources\n\necho \"Synced $APP_NAME\"\n\n# Usage: ./sync-app.sh my-nginx-app\n# Auto-prunes deleted resources."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Python script using kubernetes-client to get pod logs."},{"role":"assistant":"from kubernetes import client, config\n\nconfig.load_kube_config()\nv1 = client.CoreV1Api()\n\npod_name = 'my-pod'\nnamespace = 'default'\nlogs = v1.read_namespaced_pod_log(name=pod_name, namespace=namespace)\nprint(logs)\n\n# Install: pip install kubernetes\n# Usage: python get_logs.py\n# Streams live logs with follow=True."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bash one-liner to lint a Helm chart."},{"role":"assistant":"helm lint ./mychart --values values.yaml --strict\n\n# Or in script:\n#!/bin/bash\nif helm lint ./mychart; then\n  echo \"Lint passed\"\n  exit 0\nelse\n  echo \"Lint failed\"\n  exit 1\nfi\n\n# Integrates in CI for validation."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Python script to deploy Helm chart via subprocess."},{"role":"assistant":"import subprocess\n\nchart_path = './mychart'\nrelease_name = 'my-release'\n\nresult = subprocess.run(['helm', 'install', release_name, chart_path, '--values', 'values.yaml'], capture_output=True, text=True)\nif result.returncode == 0:\n    print('Deployed successfully')\nelse:\n    print(f'Error: {result.stderr}')\n\n# Usage: python deploy_helm.py\n# Handles errors, extend with --wait."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bash script to scan Kubernetes images with Trivy."},{"role":"assistant":"#!/bin/bash\n\nNAMESPACE=$1\n\nif [ -z \"$NAMESPACE\" ]; then\n  NAMESPACE=default\nfi\n\nkubectl get pods -n $NAMESPACE -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[*].image}{\"\\n\"}{end}' | while read pod image; do\n  trivy image $image\n  echo \"---\"\ndone\n\n# Usage: ./scan-images.sh my-ns\n# Scans all pod images in namespace."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Python with argocd-python-client to get app status."},{"role":"assistant":"from argocd.client import Client\n\nargocd_client = Client('argocd.example.com', token='your-token')\n\napps = argocd_client.list_applications()\nfor app in apps:\n    status = argocd_client.get_application(app.metadata.name)\n    print(f\"{app.metadata.name}: {status.status.sync.status}\")\n\n# Install: pip install argocd-python-client\n# Usage: python argocd_status.py\n# Requires ArgoCD server access."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bash script to backup ArgoCD applications."},{"role":"assistant":"#!/bin/bash\n\nargocd app list --output yaml > argocd-apps-backup.yaml\n\n# Optional: Filter by project\nargocd app list -p my-project --output yaml > project-backup.yaml\n\necho \"Backup saved to argocd-apps-backup.yaml\"\n\n# Usage: ./backup-argocd.sh\n# Restore with kubectl apply -f."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Python script to validate Kubernetes YAML with kubeval."},{"role":"assistant":"import subprocess\n\nyaml_files = ['deployment.yaml', 'service.yaml']\n\nfor file in yaml_files:\n    result = subprocess.run(['kubeval', file, '--quiet'], capture_output=True, text=True)\n    if result.returncode != 0:\n        print(f\"Validation failed for {file}: {result.stderr}\")\n    else:\n        print(f\"{file} validated\")\n\n# Install kubeval binary\n# Usage: python validate_k8s.py\n# Integrates in CI pipelines."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bash script for Helm template rendering and diff."},{"role":"assistant":"#!/bin/bash\n\nOLD_RENDER=$(helm template my-release ./mychart --values old-values.yaml)\nNEW_RENDER=$(helm template my-release ./mychart --values new-values.yaml)\n\necho \"$OLD_RENDER\" > old.yaml\necho \"$NEW_RENDER\" > new.yaml\ndiff old.yaml new.yaml\n\n# Usage: ./helm-diff.sh\n# Shows changes between value sets."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Python script to automate ArgoCD app creation."},{"role":"assistant":"from argocd.client import Client\nfrom kubernetes import client as k8s_client, config as k8s_config\n\nargocd_client = Client('argocd.example.com', token='token')\n\napp_spec = {\n    'metadata': {'name': 'new-app'},\n    'spec': {\n        'project': 'default',\n        'source': {'repoURL': 'https://github.com/user/gitops', 'path': 'apps/new'},\n        'destination': {'server': 'https://kubernetes.default.svc', 'namespace': 'default'}\n    }\n}\n\nargocd_client.create_application(app_spec)\nprint('App created')\n\n# Usage: python create_app.py\n# Extends with sync."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bash script to check Kubernetes resource quotas."},{"role":"assistant":"#!/bin/bash\n\nNAMESPACE=$1 || default\n\nkubectl get resourcequota -n $NAMESPACE -o json | jq -r '.items[] | .metadata.name + \": \" + (.status.used.requests.cpu // \"0\")'\n\n# Usage: ./check-quotas.sh my-ns\n# Shows used CPU per quota."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Python script for Helm dependency update."},{"role":"assistant":"import subprocess\n\nchart_dir = './mychart'\n\nsubprocess.run(['helm', 'dependency', 'update', chart_dir])\n\n# Check updated\nresult = subprocess.run(['helm', 'dependency', 'list', chart_dir], capture_output=True, text=True)\nprint(result.stdout)\n\n# Usage: python update_helm_deps.py\n# Automates in CI."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bash script to rotate Kubernetes secrets."},{"role":"assistant":"#!/bin/bash\n\nSECRET_NAME=$1\nNEW_VALUE=$2\n\nkubectl create secret generic temp-secret --from-literal=key=$NEW_VALUE -n default --dry-run=client -o yaml |\nkubectl apply -f -\n\nkubectl patch secret $SECRET_NAME -p '{\"data\":{\"key\":\"'$(echo -n $NEW_VALUE | base64)'\"}}' -n default\n\nkubectl delete secret temp-secret -n default\n\n# Usage: ./rotate-secret.sh my-secret 'newpass'\n# Patches base64-encoded value."}]}

{"doc_id":"opa-030","chunk_id":"opa-030:0","title":"Gatekeeper ConstraintTemplate: Allowed Registries","text":"apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8sallowedregistries\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sAllowedRegistries\n      validation:\n        openAPIV3Schema:\n          properties:\n            prefixes:\n              type: array\n              items:\n                type: string\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package k8sallowedregistries\n\n      violation[{\n        \\\"msg\\\": msg,\n        \\\"details\\\": {\\\"image\\\": image}\n      }] {\n        input.review.kind.kind == \\\"Pod\\\"\n        c := input.parameters.prefixes\n        some ctn\n        image := input.review.object.spec.containers[ctn].image\n        not startswith_any(image, c)\n        msg := sprintf(\"image %s not from approved registries\", [image])\n      }\n\n      startswith_any(s, arr) {\n        some i\n        startswith(s, arr[i])\n      }","metadata":{"source":"author","topic":["gatekeeper","k8s","images"],"section":"gatekeeper","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-031","chunk_id":"opa-031:0","title":"Gatekeeper Constraint Instance","text":"apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sAllowedRegistries\nmetadata:\n  name: only-corp-registries\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n  parameters:\n    prefixes:\n      - corp.registry.local/\n      - 123456789012.dkr.ecr.us-east-1.amazonaws.com/","metadata":{"source":"author","topic":["gatekeeper","policy"],"section":"gatekeeper","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-032","chunk_id":"opa-032:0","title":"Conftest Rego: Terraform S3 Public Access Block","text":"package terraform.s3\n\ndeny[msg] {\n  some r\n  input.resource.aws_s3_bucket[r]\n  acl := input.resource.aws_s3_bucket[r].acl\n  acl == \"public-read\" or acl == \"public-read-write\"\n  msg := sprintf(\"Bucket %s has public ACL %s\", [r, acl])\n}\n\ndeny[msg] {\n  some p\n  input.resource.aws_s3_bucket_policy[p]\n  allow := input.resource.aws_s3_bucket_policy[p].policy.Statement[_]\n  allow.Effect == \"Allow\"\n  allow.Principal == \"*\"\n  msg := sprintf(\"Bucket policy %s allows public access\", [p])\n}","metadata":{"source":"author","topic":["conftest","terraform","s3"],"section":"tools","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-033","chunk_id":"opa-033:0","title":"OPA Tests for S3 Policy (opa test)","text":"package terraform.s3_test\n\nimport data.terraform.s3\n\nmock_input_public_acl := {\n  \"resource\": {\n    \"aws_s3_bucket\": {\"b\": {\"acl\": \"public-read\"}}\n  }\n}\n\nmock_input_public_policy := {\n  \"resource\": {\n    \"aws_s3_bucket_policy\": {\n      \"p\": {\"policy\": {\"Statement\": [{\"Effect\": \"Allow\", \"Principal\": \"*\"}]}}\n    }\n  }\n}\n\ntest_public_acl_is_denied {\n  s3.deny[msg] with input as mock_input_public_acl\n}\n\ntest_public_policy_is_denied {\n  s3.deny[msg] with input as mock_input_public_policy\n}","metadata":{"source":"author","topic":["opa","testing"],"section":"testing","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-034","chunk_id":"opa-034:0","title":"OPA Decision API: cURL Example","text":"curl -s -X POST http://localhost:8181/v1/data/authz/allow \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"input\": {\"subject\": \"alice\", \"action\": \"read\", \"resource\": \"doc/123\"}}'","metadata":{"source":"author","topic":["opa","api"],"section":"integration","project":"GP-Copilot","lang":"en"}}


{"doc_id":"awss-030","chunk_id":"awss-030:0","title":"Terraform: S3 Bucket with BPA + Ownership Enforced","text":"resource \"aws_s3_bucket\" \"logs\" {\n  bucket = \"corp-logs-example\"\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"logs\" {\n  bucket = aws_s3_bucket.logs.id\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_s3_bucket_ownership_controls\" \"logs\" {\n  bucket = aws_s3_bucket.logs.id\n  rule { object_ownership = \"BucketOwnerEnforced\" }\n}","metadata":{"source":"author","topic":["terraform","s3","security"],"section":"s3-security","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-031","chunk_id":"awss-031:0","title":"S3 Gateway VPC Endpoint Policy (Restrictive)","text":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:*\", \"Resource\": [\n      \"arn:aws:s3:::corp-logs-example\",\n      \"arn:aws:s3:::corp-logs-example/*\"\n    ], \"Condition\": {\"StringEquals\": {\"aws:PrincipalOrgID\": \"o-abc123\"}}}\n  ]\n}","metadata":{"source":"author","topic":["s3","endpoint-policy"],"section":"s3-security","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-032","chunk_id":"awss-032:0","title":"IAM Least-Privilege: Read Objects from One Bucket","text":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\"Sid\": \"List\",\n     \"Effect\": \"Allow\",\n     \"Action\": [\"s3:ListBucket\"],\n     \"Resource\": [\"arn:aws:s3:::corp-logs-example\"]},\n    {\"Sid\": \"Get\",\n     \"Effect\": \"Allow\",\n     \"Action\": [\"s3:GetObject\"],\n     \"Resource\": [\"arn:aws:s3:::corp-logs-example/*\"]}\n  ]\n}","metadata":{"source":"author","topic":["iam","s3","least-privilege"],"section":"iam-policies","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-033","chunk_id":"awss-033:0","title":"EventBridge Rule: GuardDuty Finding → Lambda","text":"{\n  \"Name\": \"gd-auto-remediate\",\n  \"EventPattern\": {\n    \"source\": [\"aws.guardduty\"],\n    \"detail-type\": [\"GuardDuty Finding\"],\n    \"detail\": {\"severity\": [{\"numeric\": [\">=\", 5]}]}\n  },\n  \"Targets\": [{\"Arn\": \"arn:aws:lambda:us-east-1:123456789012:function:quarantine-ec2\", \"Id\": \"t1\"}]\n}","metadata":{"source":"author","topic":["eventbridge","guardduty","lambda"],"section":"soar-lite","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-034","chunk_id":"awss-034:0","title":"Lambda Handler Skeleton: Quarantine EC2","text":"import boto3\n\nec2 = boto3.client('ec2')\n\ndef handler(event, context):\n    instance_id = event['detail']['resource']['instanceDetails']['instanceId']\n    ec2.create_tags(Resources=[instance_id], Tags=[{'Key':'quarantine','Value':'true'}])\n    # Optional: detach IGW-facing SG, attach quarantine SG\n    return {\"status\":\"ok\",\"instance\":instance_id}","metadata":{"source":"author","topic":["lambda","ec2","automation"],"section":"soar-lite","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-035","chunk_id":"awss-035:0","title":"AWS Config Conformance Pack (Fragment)","text":"Resources:\n  S3BucketPublicReadProhibited:\n    Type: AWS::Config::ConfigRule\n    Properties:\n      ConfigRuleName: s3-bucket-public-read-prohibited\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED\n  RootMFAEnabled:\n    Type: AWS::Config::ConfigRule\n    Properties:\n      ConfigRuleName: root-mfa-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED","metadata":{"source":"author","topic":["aws-config","compliance"],"section":"governance","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-036","chunk_id":"awss-036:0","title":"Terraform: Enable EBS Encryption by Default","text":"resource \"aws_ebs_encryption_by_default\" \"this\" {\n  enabled = true\n}","metadata":{"source":"author","topic":["kms","ebs","encryption"],"section":"encryption","project":"GP-Copilot","lang":"en"}}

{"doc_id":"awsn-030","chunk_id":"awsn-030:0","title":"Terraform: ALB + WAFv2 Association (HTTP→HTTPS)","text":"resource \"aws_lb\" \"web\" {\n  name               = \"web-alb\"\n  load_balancer_type = \"application\"\n  subnets            = var.public_subnets\n  security_groups    = [aws_security_group.alb.id]\n}\n\nresource \"aws_lb_listener\" \"https\" {\n  load_balancer_arn = aws_lb.web.arn\n  port              = 443\n  protocol          = \"HTTPS\"\n  ssl_policy        = \"ELBSecurityPolicy-TLS13-1-2-2021-06\"\n  certificate_arn   = var.acm_cert_arn\n  default_action { type = \"fixed-response\" fixed_response { content_type = \"text/plain\" message_body = \"ok\" status_code = \"200\" } }\n}\n\nresource \"aws_wafv2_web_acl_association\" \"alb\" {\n  resource_arn = aws_lb.web.arn\n  web_acl_arn  = var.web_acl_arn\n}","metadata":{"source":"author","topic":["alb","waf","tls"],"section":"ingress","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-031","chunk_id":"awsn-031:0","title":"Transit Gateway: Attachments + Route Tables","text":"resource \"aws_ec2_transit_gateway\" \"tgw\" {}\nresource \"aws_ec2_transit_gateway_vpc_attachment\" \"app\" {\n  transit_gateway_id = aws_ec2_transit_gateway.tgw.id\n  vpc_id             = aws_vpc.app.id\n  subnet_ids         = aws_subnet.app_private[*].id\n}\nresource \"aws_ec2_transit_gateway_route_table\" \"seg\" { transit_gateway_id = aws_ec2_transit_gateway.tgw.id }\nresource \"aws_ec2_transit_gateway_route_table_association\" \"seg_app\" {\n  transit_gateway_attachment_id = aws_ec2_transit_gateway_vpc_attachment.app.id\n  transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.seg.id\n}","metadata":{"source":"author","topic":["tgw","routing"],"section":"inter-vpc","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-032","chunk_id":"awsn-032:0","title":"Route 53 Resolver: Inbound/Outbound Endpoints","text":"resource \"aws_route53_resolver_endpoint\" \"inbound\" {\n  name      = \"inbound\"\n  direction = \"INBOUND\"\n  security_group_ids = [aws_security_group.dns.id]\n  ip_address { subnet_id = aws_subnet.shared_1.id }\n  ip_address { subnet_id = aws_subnet.shared_2.id }\n}\nresource \"aws_route53_resolver_endpoint\" \"outbound\" {\n  name      = \"outbound\"\n  direction = \"OUTBOUND\"\n  security_group_ids = [aws_security_group.dns.id]\n  ip_address { subnet_id = aws_subnet.shared_1.id }\n  ip_address { subnet_id = aws_subnet.shared_2.id }\n}","metadata":{"source":"author","topic":["route53","dns","hybrid"],"section":"dns","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-033","chunk_id":"awsn-033:0","title":"EKS IRSA: Trust Policy + SA Annotation","text":"# IAM trust policy for role used by a service account\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Principal\": {\"Federated\": \"arn:aws:iam::123456789012:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/ABCDEFG\"},\n    \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n    \"Condition\": {\"StringEquals\": {\"oidc.eks.us-east-1.amazonaws.com/id/ABCDEFG:sub\": \"system:serviceaccount:ns:sa\"}}\n  }]\n}\n# k8s ServiceAccount annotation:\n# metadata.annotations[\"eks.amazonaws.com/role-arn\"] = arn:aws:iam::123456789012:role/sa-role","metadata":{"source":"author","topic":["eks","irsa","iam"],"section":"eks","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-034","chunk_id":"awsn-034:0","title":"PrivateLink (Endpoint Service) Basics","text":"# Producer VPC exposes NLB as Endpoint Service\nresource \"aws_vpc_endpoint_service\" \"svc\" {\n  acceptance_required = true\n  network_load_balancer_arns = [aws_lb.nlb.arn]\n}\n# Consumer VPC creates Interface Endpoint\nresource \"aws_vpc_endpoint\" \"ep\" {\n  vpc_id            = aws_vpc.consumer.id\n  service_name      = aws_vpc_endpoint_service.svc.service_name\n  vpc_endpoint_type = \"Interface\"\n  subnet_ids        = aws_subnet.consumer_private[*].id\n  security_group_ids = [aws_security_group.consumer_ep.id]\n}","metadata":{"source":"author","topic":["privatelink","nlb","endpoints"],"section":"connectivity","project":"GP-Copilot","lang":"en"}}

{"qid":"opa-q1","question":"What is the purpose of a Gatekeeper ConstraintTemplate vs a Constraint?","expected_keywords":["template defines rego and schema","constraint binds scope and params"],"reference_doc_ids":["opa-005","opa-030","opa-031"],"difficulty":"easy","eval_type":"keywords_any_all"}
{"qid":"opa-q2","question":"Write a Rego pattern to default deny and allow only approved image registries.","expected_keywords":["default allow = false","startswith","parameters","prefixes"],"reference_doc_ids":["opa-030"],"difficulty":"medium","eval_type":"keywords_all"}
{"qid":"opa-q3","question":"How do you test Rego policies locally for Terraform S3 public access?","expected_keywords":["conftest","opa test","deny messages"],"reference_doc_ids":["opa-032","opa-033"],"difficulty":"easy","eval_type":"keywords_any_all"}
{"qid":"opa-q4","question":"Show the OPA Decision API request shape for evaluating data.authz.allow.","expected_keywords":["POST /v1/data/authz/allow","input"],"reference_doc_ids":["opa-008","opa-034"],"difficulty":"easy","eval_type":"keywords_all"}

{"qid":"aws-q1","question":"How do you prevent public access to an S3 bucket and enforce bucket-owner enforced ownership? Show Terraform.","expected_keywords":["aws_s3_bucket_public_access_block","BucketOwnerEnforced"],"reference_doc_ids":["awss-030"],"difficulty":"easy","eval_type":"keywords_all"}
{"qid":"aws-q2","question":"Explain a restrictive S3 VPC endpoint policy and how it pairs with bucket policy conditions.","expected_keywords":["gateway endpoint","endpoint policy","PrincipalOrgID","SourceVpce"],"reference_doc_ids":["awss-010","awss-031"],"difficulty":"medium","eval_type":"keywords_any_all"}
{"qid":"aws-q3","question":"What is the IAM evaluation order and how do SCPs and permission boundaries affect the final decision?","expected_keywords":["explicit deny overrides allow","SCPs filter","boundaries cap"],"reference_doc_ids":["awss-000","awss-002","awss-003"],"difficulty":"medium","eval_type":"keywords_all"}
{"qid":"aws-q4","question":"Show Terraform to associate a WAFv2 web ACL to an ALB and force HTTPS.","expected_keywords":["aws_wafv2_web_acl_association","aws_lb_listener","443"],"reference_doc_ids":["awsn-030"],"difficulty":"easy","eval_type":"keywords_all"}
{"qid":"aws-q5","question":"When do you choose Transit Gateway over VPC peering?","expected_keywords":["hub and spoke","no transitive routing with peering","segmentation via route tables"],"reference_doc_ids":["awsn-006","awsn-031"],"difficulty":"easy","eval_type":"keywords_any_all"}
{"qid":"aws-q6","question":"Describe EKS IRSA setup at a high level and show the trust policy condition.","expected_keywords":["OIDC provider","AssumeRoleWithWebIdentity","StringEquals sub serviceaccount"],"reference_doc_ids":["awss-016","awsn-033"],"difficulty":"medium","eval_type":"keywords_all"}


{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Unit test for the Bash script listing out-of-sync ArgoCD apps using bats."},{"role":"assistant":"Use bats for Bash testing.\n\nCreate test.bats:\n```bash\n#!/usr/bin/env bats\n\nsetup() {\n  load 'test_helper/bats-support/load'\n  load 'test_helper/bats-assert/load'\n  # Mock argocd app list output\n  export MOCK_ARGO_OUT='{\"items\":[{\"sync\":{\"status\":\"OutOfSync\"},\"metadata\":{\"name\":\"app1\"}}]}'\n}\n\n@test \"lists out-of-sync apps\" {\n  run mock argocd app list --output json\n  echo \"$MOCK_ARGO_OUT\" | jq -r '.items[] | select(.sync.status != \\\"Synced\\\") | .metadata.name' | assert_output --partial \"app1\"\n}\n```\n\nRun: `bats test.bats`. Install bats: `npm install -g bats`. Ref: github.com/bats-core/bats-core."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Pytest unit test for Python script getting pod logs."},{"role":"assistant":"Use pytest with mock.\n\nTest file test_logs.py:\n```python\nimport pytest\nfrom unittest.mock import Mock, patch\n\nfrom get_logs import v1  # Assume script in get_logs.py\n\n@patch('kubernetes.client.CoreV1Api')\ndef test_get_pod_logs(mock_v1):\n    mock_logs = 'Log line 1\\nLog line 2'\n    mock_v1.return_value.read_namespaced_pod_log.return_value = mock_logs\n    \n    logs = v1.read_namespaced_pod_log('my-pod', 'default')\n    \n    assert logs == mock_logs\n    mock_v1.return_value.read_namespaced_pod_log.assert_called_once_with('my-pod', 'default')\n\n# Run: pytest test_logs.py -v\n```\n\nInstall: `pip install pytest`. Ref: docs.pytest.org/en/stable/."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bats test for Bash Helm lint script."},{"role":"assistant":"test_helm_lint.bats:\n```bash\n#!/usr/bin/env bats\n\n@test \"passes lint on valid chart\" {\n  run helm lint ./valid-chart\n  assert_success\n  assert_output --partial \"Lint passed\"\n}\n\n@test \"fails lint on invalid chart\" {\n  run helm lint ./invalid-chart\n  assert_failure\n  assert_output --partial \"Lint failed\"\n}\n\n# Mock helm if needed: export HELM_MOCK='lint output'\n```\n\nRun: `bats test_helm_lint.bats`. Tests exit codes and output."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Unit test for Python Helm deploy script using pytest."},{"role":"assistant":"test_deploy_helm.py:\n```python\nimport pytest\nfrom unittest.mock import Mock, patch\n\nfrom deploy_helm import subprocess  # From script\n\n@patch('deploy_helm.subprocess.run')\ndef test_helm_deploy_success(mock_run):\n    mock_run.return_value.returncode = 0\n    mock_run.return_value.stderr = ''\n    \n    deploy_helm_deploy()  # Call script function\n    \n    mock_run.assert_called_once_with(['helm', 'install', 'my-release', './mychart', '--values', 'values.yaml'], capture_output=True, text=True)\n    assert 'Deployed successfully' in mock_run.return_value.stdout  # Mock print\n\n@patch('deploy_helm.subprocess.run')\ndef test_helm_deploy_failure(mock_run):\n    mock_run.return_value.returncode = 1\n    mock_run.return_value.stderr = 'Error msg'\n    \n    deploy_helm_deploy()\n    \n    assert 'Error' in mock_run.return_value.stderr\n```\n\nRun: `pytest test_deploy_helm.py`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bats unit test for Bash Trivy image scan script."},{"role":"assistant":"test_scan_images.bats:\n```bash\n#!/usr/bin/env bats\n\n@test \"scans images in namespace\" {\n  export MOCK_KUBECTL='pod1 nginx:latest\\npod2 alpine:3.18'\n  export MOCK_TRIVY='Vuln: low in nginx:latest'\n  \n  run ./scan-images.sh test-ns\n  \n  assert_success\n  assert_output --partial 'Vuln: low in nginx:latest'\n  assert_output --partial '---'\n}\n\n@test \"uses default namespace\" {\n  run ./scan-images.sh\n  assert_output --partial 'default'\n}\n```\n\nMock kubectl/trivy outputs via env. Run: `bats test_scan_images.bats`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Pytest test for Python ArgoCD app status script."},{"role":"assistant":"test_argocd_status.py:\n```python\nimport pytest\nfrom unittest.mock import Mock, patch\n\nfrom argocd_status import argocd_client  # Script module\n\n@patch('argocd_status.Client')\ndef test_get_app_status(mock_client):\n    mock_apps = [Mock(metadata=Mock(name='app1'), status=Mock(sync=Mock(status='Synced')))]\n    mock_client.return_value.list_applications.return_value = mock_apps\n    mock_client.return_value.get_application.return_value = mock_apps[0].status\n    \n    get_status()  # Script function\n    \n    mock_client.return_value.list_applications.assert_called_once()\n    assert 'app1: Synced' in captured_output  # Use capsys\n\n# With: def test_get_app_status(capfd):\n#    ... print(...)\n#    captured = capfd.readouterr()\n```\n\nRun: `pytest test_argocd_status.py -v`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bats test for Bash ArgoCD backup script."},{"role":"assistant":"test_backup_argocd.bats:\n```bash\n#!/usr/bin/env bats\n\nsetup() {\n  rm -f argocd-apps-backup.yaml\n}\n\n@test \"creates backup file\" {\n  export MOCK_ARGO='apiVersion: v1\\nkind: List\\nitems: []'\n  run ./backup-argocd.sh\n  \n  assert_success\n  assert_output --partial 'Backup saved'\n  [ -f argocd-apps-backup.yaml ]\n  assert_file_contains argocd-apps-backup.yaml 'apiVersion: v1'\n}\n\n@test \"backs up specific project\" {\n  run ./backup-argocd.sh project-backup.yaml my-project\n  assert_file_contains project-backup.yaml 'my-project'\n}\n```\n\nUses assert_file_contains helper. Run: `bats test_backup_argocd.bats`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Pytest unit test for Python K8s YAML validation script."},{"role":"assistant":"test_validate_k8s.py:\n```python\nimport pytest\nfrom unittest.mock import Mock, patch\n\nfrom validate_k8s import subprocess  # Script\n\n@patch('validate_k8s.subprocess.run')\ndef test_validate_success(mock_run, tmp_path):\n    mock_run.return_value.returncode = 0\n    mock_run.return_value.stderr = ''\n    \n    yaml_file = tmp_path / 'deployment.yaml'\n    yaml_file.write_text('valid yaml')\n    \n    validate_k8s_yaml(yaml_file)  # Function\n    \n    mock_run.assert_called_once_with(['kubeval', str(yaml_file), '--quiet'], capture_output=True, text=True)\n    assert 'validated' in capfd.readouterr().out\n\n@patch('validate_k8s.subprocess.run')\ndef test_validate_failure(mock_run):\n    mock_run.return_value.returncode = 1\n    mock_run.return_value.stderr = 'Invalid YAML'\n    \n    validate_k8s_yaml('invalid.yaml')\n    \n    assert 'Validation failed' in capfd.readouterr().out\n```\n\nRun: `pytest test_validate_k8s.py`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bats unit test for Bash Helm template diff script."},{"role":"assistant":"test_helm_diff.bats:\n```bash\n#!/usr/bin/env bats\n\nsetup() {\n  rm -f old.yaml new.yaml\n}\n\n@test \"diffs between old and new renders\" {\n  export MOCK_HELM_OLD='old content'\n  export MOCK_HELM_NEW='new content'\n  \n  run ./helm-diff.sh\n  \n  assert_success\n  assert_output --partial '< old content'\n  assert_output --partial '> new content'\n  [ -f old.yaml ]\n  [ -f new.yaml ]\n}\n\n@test \"handles no diff\" {\n  export MOCK_HELM_OLD='same'\n  export MOCK_HELM_NEW='same'\n  run ./helm-diff.sh\n  refute_output --partial 'diff'\n}\n```\n\nMocks helm template. Run: `bats test_helm_diff.bats`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Pytest test for Python ArgoCD app creation script."},{"role":"assistant":"test_create_app.py:\n```python\nimport pytest\nfrom unittest.mock import Mock, patch\n\nfrom create_app import argocd_client  # Script\n\n@patch('create_app.Client')\ndef test_create_application(mock_client):\n    mock_create = Mock()\n    mock_client.return_value.create_application.return_value = mock_create\n    \n    create_argocd_app('new-app', 'https://github.com/user/gitops')\n    \n    mock_client.return_value.create_application.assert_called_once_with({\n        'metadata': {'name': 'new-app'},\n        'spec': {\n            'project': 'default',\n            'source': {'repoURL': 'https://github.com/user/gitops', 'path': 'apps/new'},\n            'destination': {'server': 'https://kubernetes.default.svc', 'namespace': 'default'}\n        }\n    })\n    assert 'App created' in capfd.readouterr().out\n```\n\nRun: `pytest test_create_app.py -v`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bats test for Bash Kubernetes resource quota script."},{"role":"assistant":"test_check_quotas.bats:\n```bash\n#!/usr/bin/env bats\n\n@test \"checks quotas in namespace\" {\n  export MOCK_KUBECTL='{\"items\":[{\"metadata\":{\"name\":\"cpu-quota\"},\"status\":{\"used\":{\"requests\":{\"cpu\":\"2\"}}}] }'\n  run ./check-quotas.sh test-ns\n  assert_output --partial 'cpu-quota: 2'\n}\n\n@test \"uses default namespace\" {\n  export MOCK_KUBECTL='{\"items\":[{\"metadata\":{\"name\":\"default-quota\"}}]}'\n  run ./check-quotas.sh\n  assert_output --partial 'default-quota'\n}\n```\n\nMocks kubectl output. Run: `bats test_check_quotas.bats`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Pytest unit test for Python Helm dependency update script."},{"role":"assistant":"test_update_helm_deps.py:\n```python\nimport pytest\nfrom unittest.mock import Mock, patch\n\nfrom update_helm_deps import subprocess  # Script\n\n@patch('update_helm_deps.subprocess.run')\ndef test_update_dependencies(mock_run):\n    mock_run.side_effect = [\n        Mock(returncode=0),  # update\n        Mock(returncode=0, stdout='deps updated')  # list\n    ]\n    \n    update_helm_dependencies('./mychart')\n    \n    mock_run.assert_any_call(['helm', 'dependency', 'update', './mychart'])\n    mock_run.assert_any_call(['helm', 'dependency', 'list', './mychart'], capture_output=True, text=True)\n    assert 'deps updated' in capfd.readouterr().out\n```\n\nRun: `pytest test_update_helm_deps.py`."}]}
{"messages":[{"role":"system","content":"You are an expert in Python and Bash scripting for DevSecOps, Kubernetes automation, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Bats test for Bash Kubernetes secret rotation script."},{"role":"assistant":"test_rotate_secret.bats:\n```bash\n#!/usr/bin/env bats\n\n@test \"rotates secret with new value\" {\n  export MOCK_KUBECTL_CREATE='created temp'\n  export MOCK_KUBECTL_PATCH='patched my-secret'\n  export MOCK_KUBECTL_DELETE='deleted temp'\n  \n  run ./rotate-secret.sh my-secret 'newpass'\n  \n  assert_success\n  assert_output --partial 'patched my-secret'\n}\n\n@test \"fails without args\" {\n  run ./rotate-secret.sh\n  assert_failure\n  assert_output --partial 'Usage'\n}\n```\n\nMocks kubectl commands. Run: `bats test_rotate_secret.bats`."}]}

{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, Helm, ArgoCD, and GitOps workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"GitHub Actions pipeline for full Helm chart CI/CD with ArgoCD."},{"role":"assistant":"Automates lint, test, package, and updates GitOps repo.\n\nExample .github/workflows/helm-cd.yaml:\n```yaml\nname: Helm CI/CD\non:\n  push:\n    branches: [main]\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: azure/setup-helm@v4\n    - run: helm lint ./mychart\n    - run: helm unittest ./mychart\n    - uses: aquasecurity/trivy-action@master\n      with:\n        scan-type: 'fs'\n        scan-ref: './mychart'\n  package:\n    needs: validate\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - run: helm package ./mychart --version $(date +%Y%m%d-%H%M%S)\n    - uses: actions/upload-artifact@v4\n      with:\n        name: helm-chart\n        path: mychart-*.tgz\n  update-gitops:\n    needs: package\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        repository: user/gitops-repo\n        token: ${{ secrets.GH_TOKEN }}\n    - run: |\n        helm upgrade --install my-release ./mychart.tgz --set image.tag=${{ github.sha }} --wait\n        # Or commit to trigger ArgoCD\n        git add . && git commit -m 'Update chart' && git push\n```\n\nTriggers ArgoCD sync. Ref: github.com/helm/chart-testing."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, GitOps, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"GitLab CI pipeline for Kubernetes manifest validation and deploy."},{"role":"assistant":"Stages for build, test, deploy with ArgoCD sync.\n\nExample .gitlab-ci.yml:\n```yaml\nstages:\n  - build\n  - test\n  - deploy\n\nbuild:\n  stage: build\n  image: alpine/helm:3.15\n  script:\n    - helm dependency update ./mychart\n    - helm package ./mychart\n  artifacts:\n    paths:\n      - mychart-*.tgz\n\ntest:\n  stage: test\n  image: alpine/helm:3.15\n  script:\n    - helm lint ./mychart\n    - helm template . | kubeval --quiet\n    - trivy fs ./mychart\n  needs: [build]\n\ndeploy:\n  stage: deploy\n  image: alpine/helm:3.15\n  script:\n    - argocd app sync my-app --helm-set image.tag=$CI_COMMIT_SHA\n  only:\n    - main\n  environment: production\n```\n\nUses ArgoCD CLI for sync. Ref: gitlab.com/help/ci/yaml/."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Jenkins declarative pipeline for ArgoCD GitOps with security scans."},{"role":"assistant":"Multi-stage with shared library.\n\nExample Jenkinsfile:\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('Checkout') {\n      steps {\n        checkout scm\n      }\n    }\n    stage('Security Scan') {\n      steps {\n        sh 'trivy fs . --exit-code 1 --no-progress --severity HIGH,CRITICAL'\n      }\n    }\n    stage('Test') {\n      steps {\n        sh 'helm lint ./mychart'\n        sh 'helm template . | kubeval'\n      }\n    }\n    stage('Deploy to ArgoCD') {\n      when { branch 'main' }\n      steps {\n        sh 'argocd app sync my-app --parameter image.tag=${env.BUILD_ID}'\n      }\n    }\n  }\n  post {\n    always {\n      archiveArtifacts artifacts: 'mychart-*.tgz', allowEmptyArchive: true\n    }\n  }\n}\n```\n\nIntegrates scans and ArgoCD. Ref: jenkins.io/doc/book/pipeline/."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, GitOps, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"CircleCI pipeline for building Docker image and triggering ArgoCD."},{"role":"assistant":"Orbs for Helm and Docker.\n\nExample config.yml:\n```yaml\nversion: 2.1\norbs:\n  helm: circleci/helm@2.0.0\n  docker: cimg/base@1.1.0\njobs:\n  build-and-deploy:\n    executor: docker/default\n    steps:\n      - checkout\n      - docker/build-push:\n          image: myapp\n          tag: $CIRCLE_SHA1\n      - helm/install-helm:\n          version: 3.15.0\n      - run: helm lint ./mychart\n      - run: |\n          echo \"image.tag=$CIRCLE_SHA1\" > values-ci.yaml\n          argocd app sync my-app --values values-ci.yaml\nworkflows:\n  ci-cd:\n    jobs:\n      - build-and-deploy:\n          filters:\n            branches:\n              only: main\n```\n\nBuilds image, updates ArgoCD. Ref: circleci.com/orbs/registry/orb/circleci/helm."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Azure DevOps pipeline for Helm package and ArgoCD sync."},{"role":"assistant":"YAML with tasks for multi-stage.\n\nExample azure-pipelines.yml:\n```yaml\ntrigger:\n- main\npool:\n  vmImage: ubuntu-latest\nstages:\n- stage: Build\n  jobs:\n  - job: Package\n    steps:\n    - bash: helm dependency update ./mychart\n    - bash: helm package ./mychart\n    - publish: mychart-*.tgz\n      artifact: helm-chart\n- stage: Test\n  dependsOn: Build\n  jobs:\n  - job: Validate\n    steps:\n    - download: current\n      artifact: helm-chart\n    - bash: helm lint ./mychart\n    - bash: helm template . | kubeval\n- stage: Deploy\n  dependsOn: Test\n  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')\n  jobs:\n  - job: Sync\n    steps:\n    - task: AzureCLI@2\n      inputs:\n        azureSubscription: 'my-sub'\n        scriptType: 'bash'\n        scriptLocation: 'inlineScript'\n        inlineScript: |\n          argocd app sync my-app --helm-set image.tag=$(Build.BuildId)\n```\n\nPackages, tests, syncs to ArgoCD. Ref: docs.microsoft.com/azure/devops/pipelines/."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, GitOps, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"GitHub Actions for multi-environment ArgoCD deploys."},{"role":"assistant":"Matrix strategy for envs.\n\nExample workflow:\n```yaml\nname: Multi-Env Deploy\non:\n  push:\n    branches: [main]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        env: [dev, staging, prod]\n    steps:\n    - uses: actions/checkout@v4\n    - uses: azure/setup-helm@v4\n    - run: |\n        argocd app sync ${{ matrix.env }}-app \\\n          --kubeconfig ${{ matrix.env }}-kubeconfig \\\n          --parameter image.tag=${{ github.sha }}\n    - run: argocd app wait ${{ matrix.env }}-app --health\n    env:\n      ARGOCD_TOKEN: ${{ secrets[format('{0}_ARGOCD_TOKEN', matrix.env)] }}\n```\n\nDeploys per env with secrets. Ref: docs.github.com/actions/using-jobs/using-a-matrix-for-your-jobs."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Jenkins pipeline with approval gates for prod ArgoCD sync."},{"role":"assistant":"Manual approval stage.\n\nExample Jenkinsfile:\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('Test') {\n      steps {\n        sh 'helm lint ./mychart'\n      }\n    }\n    stage('Deploy Dev') {\n      steps {\n        sh 'argocd app sync dev-app'\n      }\n    }\n    stage('Approval') {\n      steps {\n        input 'Approve prod deploy?'\n      }\n    }\n    stage('Deploy Prod') {\n      steps {\n        sh 'argocd app sync prod-app --prune'\n      }\n    }\n  }\n}\n```\n\nGates prod. Ref: jenkins.io/doc/book/pipeline/syntax/#input."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, GitOps, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"CircleCI for integrating security scans in ArgoCD pipeline."},{"role":"assistant":"Security stage with Trivy and Polaris.\n\nExample config.yml:\n```yaml\n- run:\n    name: Security Scans\n    command: |\n      trivy fs . --exit-code 1 --severity HIGH,CRITICAL\n      helm template . | polaris audit --only-show-warnings=false\n    background: false\n- run:\n    name: Sync to ArgoCD\n    command: |\n      argocd app sync my-app --validate\n    when: on_success\n```\n\nFails on vulns. Ref: circleci.com/docs/security-testing/."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"GitLab CI with review apps for ArgoCD previews."},{"role":"assistant":"Dynamic envs for MRs.\n\nExample .gitlab-ci.yml:\n```yaml\nreview:\n  stage: deploy\n  script:\n    - echo \"REVIEW_URL=$CI_PROJECT_URL/merge_requests/$CI_MERGE_REQUEST_IID\" > review.env\n    - argocd app create preview-$CI_MERGE_REQUEST_IID --repo $CI_REPOSITORY_URL --path apps/preview --dest-namespace preview-$CI_MERGE_REQUEST_IID\n    - argocd app sync preview-$CI_MERGE_REQUEST_IID\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n  environment:\n    name: preview/$CI_MERGE_REQUEST_IID\n    url: $REVIEW_URL\n  when: manual\n```\n\nCreates temp namespace/app per MR. Ref: gitlab.com/help/ci/environments/."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, GitOps, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Azure DevOps for blue-green ArgoCD deploys."},{"role":"assistant":"Swap services post-sync.\n\nExample task:\n```yaml\n- bash: |\n    argocd app sync blue-app --parameter version=blue\n    # Wait for health\n    sleep 60\n    kubectl patch service my-svc -p '{\"spec\":{\"selector\":{\"version\":\"blue\"}}}' --type=merge\n  displayName: Blue-Green Swap\n  condition: and(succeeded(), eq(variables['Environment'], 'prod'))\n```\n\nUses Rollouts for traffic. Ref: docs.microsoft.com/azure/devops/pipelines/ecosystems/kubernetes/blue-green."}]}
{"messages":[{"role":"system","content":"You are an expert in CI/CD pipeline automation for DevSecOps, Kubernetes, Helm, and ArgoCD workflows. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices for error handling in ArgoCD CI/CD pipelines."},{"role":"assistant":"- Use --wait --timeout for syncs.\n- Retry with exponential backoff: `argocd app sync --retry 3`.\n- Notifications on failure: Integrate Slack in workflow.\n- Rollback on error: `argocd app rollback --revision prev`.\n- Logs: `argocd app logs app-name` in post-fail step.\n\nExample: Add `|| argocd app rollback $APP` after sync."}]}

{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are key AWS security standards for S3 buckets?"},{"role":"assistant":"AWS S3 Standards:\n- Block public access: Enable bucket policy denying public ACLs.\n- Encryption: SSE-S3 or KMS for at-rest.\n- Logging: Enable access logs to S3/CloudWatch.\n- Versioning: Enabled for data protection.\n- MFA Delete: Required for critical buckets.\n\nExample Policy:\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"DenyPublic\",\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n      \"Condition\": {\n        \"StringEquals\": {\"aws:SourceAccount\": \"account-id\"}\n      }\n    }\n  ]\n}\n```\nRef: docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"Explain Azure RBAC standards for resource management."},{"role":"assistant":"Azure RBAC Standards:\n- Principle of least privilege: Assign minimal roles (e.g., Reader, Contributor).\n- Custom roles: For granular access.\n- PIM: Just-in-time elevation.\n- Deny assignments: Block actions explicitly.\n- Audit: Log all assignments.\n\nExample Custom Role JSON:\n```json\n{\n  \"Name\": \"CustomReader\",\n  \"Actions\": [\"Microsoft.Resources/subscriptions/read\"],\n  \"NotActions\": [],\n  \"DataActions\": [],\n  \"NotDataActions\": [],\n  \"AssignableScopes\": [\"/subscriptions/{sub-id}\"]\n}\n```\nRef: learn.microsoft.com/en-us/azure/role-based-access-control/custom-roles."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are CCSP domain 1 standards for cloud concepts?"},{"role":"assistant":"CCSP Domain 1 (Cloud Concepts): Standards include understanding IaaS/PaaS/SaaS models, shared responsibility, data lifecycle (create/store/use/share/delete).\n\nKey Practices:\n- SLAs: Ensure 99.9%+ uptime.\n- Compliance: Align with NIST/ISO 27017.\n- Risk Assessment: Classify data per sensitivity.\n\nExample: Use PaaS for managed services to reduce ops burden. Ref: isc2.org/ccsp-domain-1."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"Terraform security standards for IaC."},{"role":"assistant":"Terraform Standards:\n- State encryption: Use remote backend (S3 with KMS).\n- No secrets in code: Use variables/providers like Vault.\n- Plan/apply review: Always run plan, approve manually.\n- Modules: Use verified sources, pin versions.\n- tfsec/checkov scans: Integrate in CI.\n\nExample Secure Backend:\n```hcl\nterraform {\n  backend \"s3\" {\n    bucket = \"tf-state\"\n    key    = \"state.tfstate\"\n    region = \"us-east-1\"\n    encrypt = true\n  }\n}\n```\nRef: terraform.io/docs/cloud/guides/recommended-practices/part1.2.html."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"Ansible security standards for configuration management."},{"role":"assistant":"Ansible Standards:\n- Vault for secrets: Encrypt vars with ansible-vault.\n- Least privilege: Use sudo only when needed, limit users.\n- Roles: Modular, from Ansible Galaxy (verified).\n- Fact caching: Disable sensitive facts.\n- Audit playbooks: Lint with ansible-lint.\n\nExample Vault Playbook:\n```yaml\n- hosts: all\n  vars_files:\n    - secrets.yml  # ansible-vault encrypted\n  tasks:\n    - name: Set password\n      user:\n        name: appuser\n        password: \"{{ vault_pass }}\"\n```\nRef: docs.ansible.com/ansible/latest/vault_guide/."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"AI/ML security standards in DevSecOps pipelines."},{"role":"assistant":"AI/ML Standards:\n- Model scanning: Use tools like Adversarial Robustness Toolbox for vulns.\n- Data poisoning prevention: Validate inputs with schemas.\n- Secure APIs: Rate limiting, auth on model endpoints.\n- Bias auditing: Regular fairness checks.\n- Containerization: Run models in non-root pods.\n\nExample: Integrate Trivy for ML container images in CI. Ref: nist.gov/itl/ai-risk-management-framework."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"CCSP Domain 2 standards for cloud data security."},{"role":"assistant":"CCSP Domain 2 (Data Security): Standards cover encryption (at-rest/transit), DLP, key management (e.g., HSMs), data masking.\n\nPractices:\n- CASB for SaaS.\n- Tokenization for PII.\n- Audit logs for access.\n\nExample: Use Azure Key Vault for key rotation. Ref: isc2.org/ccsp-domain-2."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"AWS IAM standards for access control."},{"role":"assistant":"AWS IAM Standards:\n- Least privilege: Use fine-grained policies.\n- MFA: Enforce for console/root.\n- Roles over users: For services/EC2.\n- Access Analyzer: Review unused perms.\n- Password policy: 14+ chars, rotation.\n\nExample Policy:\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Action\": [\"s3:GetObject\"],\n    \"Resource\": \"arn:aws:s3:::my-bucket/*\"\n  }]\n}\n```\nRef: docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"Azure Sentinel standards for SIEM in cloud."},{"role":"assistant":"Azure Sentinel Standards:\n- Connectors: Enable all logs (Azure AD, NSG).\n- Workbooks: Custom for threat hunting.\n- Playbooks: Automate responses (Logic Apps).\n- UEBA: For anomaly detection.\n- Retention: 90+ days for compliance.\n\nExample: Alert rule for failed logins. Ref: docs.microsoft.com/azure/sentinel/."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"Terraform plan validation standards in CI."},{"role":"assistant":"Terraform Plan Standards:\n- tfplan.json: Review diffs in PRs.\n- tflint/tfsec: Static analysis.\n- Sentinel policies: Enforce tags/costs.\n- No auto-apply: Manual approval for prod.\n\nExample CI Step:\n```yaml\n- run: terraform plan -out=tfplan -var-file=prod.tfvars\n- run: terraform show -json tfplan > plan.json\n- uses: trufflesecurity/terraform-scan@v1\n  with:\n    tfplan: plan.json\n```\nRef: terraform.io/docs/cloud/guides/recommended-practices/."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"Ansible Tower/AWX standards for enterprise automation."},{"role":"assistant":"Ansible Tower Standards:\n- RBAC: Projects, inventories, job templates per team.\n- Schedules: Automated, with approvals.\n- Logging: Full audit trails.\n- Credentials: Encrypted, rotated.\n- Integrations: With ServiceNow for ticketing.\n\nExample: Job Template with survey for vars. Ref: docs.ansible.com/ansible-tower/."}]}
{"messages":[{"role":"system","content":"You are an expert in cloud security standards (AWS, Azure, CCSP), DevSecOps, Terraform, Ansible, and AI in security. Provide accurate, concise explanations and examples."},{"role":"user","content":"AI-driven threat detection standards in cloud security."},{"role":"assistant":"AI Threat Detection Standards:\n- Anomaly ML: Use Azure Sentinel or AWS GuardDuty.\n- Behavioral analysis: UEBA for insider threats.\n- Automated response: SOAR integration.\n- Model explainability: For auditability.\n- False positive tuning: Thresholds via feedback loops.\n\nExample: GuardDuty ML alerts on unusual API calls. Ref: aws.amazon.com/guardduty/."}]}

{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are the core governance standards in CCSP Domain 3 for cloud platforms?"},{"role":"assistant":"CCSP Domain 3 governance standards emphasize shared responsibility, compliance mapping (e.g., SOC 2, ISO 27001), and risk management. Key: Define policies for access (IAM), data classification, and audit trails. Ensure alignment with cloud provider SLAs and conduct regular GRC assessments. Example: Map controls to NIST SP 800-53 for infrastructure security. Ref: isc2.org/ccsp-domain-3."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"Explain shared responsibility model governance in Domain 3."},{"role":"assistant":"Shared Responsibility: Cloud provider secures infrastructure (physical, hypervisor); customer governs data, apps, access. Standards: Document delineation in policies, train teams, audit annually. Example: AWS customer responsible for IAM policies; provider for EC2 host OS. Use RACI matrix for clarity. Ref: cloudsecurityalliance.org/research/topics/shared-responsibility/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"What governance standards apply to IAM in cloud platforms (Domain 3)?"},{"role":"assistant":"IAM Governance: Enforce least privilege, MFA, role-based access, federated identity (SAML/OIDC). Standards: Regular reviews, just-in-time access (PIM), logging all auth events. Example: Azure AD PIM for temporary elevation; policy: No permanent admin roles. Ref: nist.gov/itl/sp800-63/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"How does Domain 3 address compliance mapping for cloud infrastructure?"},{"role":"assistant":"Compliance Mapping: Align platform controls to frameworks (e.g., PCI-DSS for compute, HIPAA for storage). Standards: Use CSP compliance reports, automate evidence collection, conduct gap analysis. Example: Map AWS VPC security groups to CIS benchmark 4.1 (default deny). Ref: cloudsecurityalliance.org/artifacts/cloud-controls-matrix-ccm/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"Governance standards for virtualization and container security in Domain 3."},{"role":"assistant":"Virtualization/Container Governance: Secure hypervisors (e.g., VMware NSX), enforce container runtime policies (e.g., Docker Bench). Standards: Image scanning, least privilege (non-root), runtime monitoring. Example: Kubernetes PSS baseline profile; policy: Scan all images with Trivy pre-deploy. Ref: cisecurity.org/benchmark/kubernetes."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are risk management standards for cloud networking in Domain 3?"},{"role":"assistant":"Networking Risk Management: Segment via VPCs/subnets, use NACLs/SGs, encrypt traffic (TLS). Standards: Annual risk assessments, zero-trust model, DDoS mitigation. Example: AWS Transit Gateway with inspection; policy: No direct internet access for prod workloads. Ref: nist.gov/itl/sp800-207/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"Domain 3 standards for incident response in cloud infrastructure."},{"role":"assistant":"Incident Response: Integrate with CSP tools (e.g., Azure Security Center), define playbooks for breaches. Standards: 24/7 monitoring, containment within 1hr, post-mortem reviews. Example: Use AWS GuardDuty alerts triggering Lambda for auto-quarantine. Ref: nist.gov/itl/sp800-61/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to govern physical and environmental security in cloud (Domain 3)?"},{"role":"assistant":"Physical/Environmental: Rely on CSP certifications (e.g., SOC 1 Type II), but govern access to on-prem hybrids. Standards: Vendor audits, redundancy (multi-AZ), disaster recovery plans. Example: Azure datacenter SOC reports; policy: Annual third-party audits. Ref: iso.org/standard/27001."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"GRC integration standards for Domain 3 cloud platforms."},{"role":"assistant":"GRC Integration: Embed governance (policies), risk (assessments), compliance (audits) in platform ops. Standards: Automated controls (OPA), continuous monitoring, reporting dashboards. Example: Use ServiceNow GRC with AWS Config for compliance tracking. Ref: isaca.org/resources/cobit/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices for auditing cloud infrastructure under Domain 3."},{"role":"assistant":"Auditing: Enable CSP logging (CloudTrail, Azure Monitor), retain 365+ days, correlate events. Standards: Quarterly audits, anomaly detection, immutable logs. Example: S3 bucket logging to CloudWatch; policy: Alert on unauthorized IAM changes. Ref: cloudsecurityalliance.org/artifacts/cloud-audit/."}]}

{"doc_id":"awss-040","chunk_id":"awss-040:0","title":"Data Classification Policy (Confidential/Internal/Public)","text":"Classification levels:\n- Confidential: legal/PII/keys; storage only in encrypted services with strict IAM (KMS CMKs, tight SCPs). Access via break-glass approvals. Decision logs mandatory.\n- Internal: operational docs, build artifacts; encrypted at rest (KMS) and in transit (TLS). Restricted to org accounts/VPC endpoints.\n- Public: marketing, docs; reviewed and approved before release; still enforce signed artifacts and integrity.\nHandling rules:\n- Tagging: resource tags Classification in {Confidential,Internal,Public}.\n- Backups: same or stronger classification as source.\n- Transmission: TLS1.2+ only; presigned URLs time-bound.\n- Auditing: CloudTrail Lake queries by Classification tag.","metadata":{"source":"author","topic":["classification","governance"],"section":"policy","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-041","chunk_id":"awss-041:0","title":"S3: Require TLS In-Transit (Bucket Policy)","text":"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[{\n    \"Sid\":\"DenyInsecureTransport\",\n    \"Effect\":\"Deny\",\n    \"Principal\":\"*\",\n    \"Action\":\"s3:*\",\n    \"Resource\":[\"arn:aws:s3:::corp-secure-bucket\",\"arn:aws:s3:::corp-secure-bucket/*\"],\n    \"Condition\":{\"Bool\":{\"aws:SecureTransport\":\"false\"}}\n  }]}\n# Enforces HTTPS only; pair with Public Access Block + Ownership Enforced.","metadata":{"source":"author","topic":["s3","tls","encryption-in-transit"],"section":"s3-security","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-042","chunk_id":"awss-042:0","title":"RDS: Encryption at Rest + TLS Required (Terraform + Parameter)","text":"# Terraform\nresource \"aws_db_instance\" \"app\" {\n  engine                = \"postgres\"\n  instance_class        = \"db.t3.medium\"\n  allocated_storage     = 50\n  storage_encrypted     = true\n  kms_key_id            = aws_kms_key.db.arn\n  publicly_accessible   = false\n  username              = \"app\"\n  password              = random_password.db.result\n  apply_immediately     = true\n  enabled_cloudwatch_logs_exports = [\"postgresql\",\"upgrade\"]\n}\n# Parameter forcing SSL (Postgres)\n# Set rds.force_ssl=1 via parameter group and associate to instance.","metadata":{"source":"author","topic":["rds","kms","tls"],"section":"database-security","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-043","chunk_id":"awss-043:0","title":"DynamoDB: Server-Side Encryption (Terraform)","text":"resource \"aws_dynamodb_table\" \"orders\" {\n  name         = \"orders\"\n  hash_key     = \"id\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  attribute { name = \"id\" type = \"S\" }\n  server_side_encryption { enabled = true kms_key_arn = aws_kms_key.data.arn }\n}","metadata":{"source":"author","topic":["dynamodb","sse","kms"],"section":"database-security","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-044","chunk_id":"awss-044:0","title":"No Hardcoded Secrets: Conftest for Kubernetes Manifests","text":"package kube.secrets\n\nviolation[msg] {\n  some i\n  c := input[i]\n  c.kind == \"Deployment\"\n  some k\n  val := c.spec.template.spec.containers[_].env[_].value\n  re_match(\"(?i)(password|secret|apikey|token)\", val)\n  msg := sprintf(\"Hardcoded secret-like value in env: %v\", [val])\n}","metadata":{"source":"author","topic":["conftest","kubernetes","secrets"],"section":"policy-as-code","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-045","chunk_id":"awss-045:0","title":"Use AWS Secrets Manager from Code (Python)","text":"import boto3, json\n\nsm = boto3.client('secretsmanager')\n_cache = {}\n\ndef get_secret(name):\n    if name in _cache: return _cache[name]\n    resp = sm.get_secret_value(SecretId=name)\n    val = resp.get('SecretString') or resp['SecretBinary']\n    _cache[name] = json.loads(val) if isinstance(val, str) else val\n    return _cache[name]\n# Usage: creds = get_secret('prod/db/creds')","metadata":{"source":"author","topic":["secrets-manager","code-sample"],"section":"secrets","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-046","chunk_id":"awss-046:0","title":"MFA Required: Deny API If Not MFA (IAM Policy)","text":"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[{\n    \"Sid\":\"DenyAllIfNoMFA\",\n    \"Effect\":\"Deny\",\n    \"Action\":\"*\",\n    \"Resource\":\"*\",\n    \"Condition\":{\"Bool\":{\"aws:MultiFactorAuthPresent\":\"false\"}}\n  }]}\n# Attach to console users; scope-down with NotAction if needed.","metadata":{"source":"author","topic":["iam","mfa"],"section":"identity","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-047","chunk_id":"awss-047:0","title":"Require MFA for AssumeRole (Condition)","text":"# Attach to user or permission boundary granting sts:AssumeRole\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\":[{\n    \"Effect\":\"Allow\",\n    \"Action\":[\"sts:AssumeRole\"],\n    \"Resource\":[\"arn:aws:iam::123456789012:role/limited\"],\n    \"Condition\":{\"Bool\":{\"aws:MultiFactorAuthPresent\":\"true\"}}\n  }]}\n# Ensures MFA is present for role assumption.","metadata":{"source":"author","topic":["sts","mfa"],"section":"identity","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-048","chunk_id":"awss-048:0","title":"S3: Default Encryption (Terraform)","text":"resource \"aws_s3_bucket\" \"secure\" { bucket = \"corp-secure\" }\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"secure\" {\n  bucket = aws_s3_bucket.secure.id\n  rule { apply_server_side_encryption_by_default { sse_algorithm = \"aws:kms\" kms_master_key_id = aws_kms_key.s3.arn } }\n}","metadata":{"source":"author","topic":["s3","encryption-at-rest","kms"],"section":"s3-security","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"awss-049","chunk_id":"awss-049:0","title":"ALB: Enforce TLS and Redirect HTTP→HTTPS (Terraform)","text":"resource \"aws_lb_listener\" \"http\" {\n  load_balancer_arn = aws_lb.web.arn\n  port = 80\n  protocol = \"HTTP\"\n  default_action { type = \"redirect\" redirect { port = \"443\" protocol = \"HTTPS\" status_code = \"HTTP_301\" } }\n}\nresource \"aws_lb_listener\" \"https\" {\n  load_balancer_arn = aws_lb.web.arn\n  port = 443\n  protocol = \"HTTPS\"\n  certificate_arn = var.acm_cert_arn\n  ssl_policy = \"ELBSecurityPolicy-TLS13-1-2-2021-06\"\n  default_action { type = \"fixed-response\" fixed_response { content_type = \"text/plain\" message_body = \"ok\" status_code = \"200\" } }\n}","metadata":{"source":"author","topic":["alb","tls","redirect"],"section":"ingress","standard":["CIS AWS 2.0"],"project":"GP-Copilot","lang":"en"}}

{"doc_id":"k8ssec-000","chunk_id":"k8ssec-000:0","title":"Pod Security Standards via Namespace Labels","text":"Apply Pod Security Admission labels to namespaces:\n- baseline: pod-security.kubernetes.io/enforce=baseline\n- restricted: pod-security.kubernetes.io/enforce=restricted\nAlso set audit/warn variants to detect drift. Prefer restricted for workloads; baseline for migration.\nExample:\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: prod\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/enforce-version: latest","metadata":{"source":"author","topic":["pss","admission"],"section":"pss","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-001","chunk_id":"k8ssec-001:0","title":"Gatekeeper: Non-Root Containers (Template)","text":"apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata: { name: k8snonroot }\nspec:\n  crd:\n    spec:\n      names: { kind: K8sNonRoot }\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package k8snonroot\n      violation[{\"msg\": msg}] {\n        input.review.kind.kind == \"Pod\"\n        c := input.review.object.spec.containers[_]\n        not c.securityContext.runAsNonRoot\n        not (c.securityContext.runAsUser && c.securityContext.runAsUser > 0)\n        msg := sprintf(\"container %q must run as non-root\", [c.name])\n      }","metadata":{"source":"author","topic":["gatekeeper","non-root"],"section":"admission","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-002","chunk_id":"k8ssec-002:0","title":"Gatekeeper: Non-Root Containers (Constraint)","text":"apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sNonRoot\nmetadata: { name: enforce-nonroot }\nspec:\n  match:\n    kinds: [{ apiGroups: [\"\"], kinds: [\"Pod\"] }]","metadata":{"source":"author","topic":["gatekeeper","non-root"],"section":"admission","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-003","chunk_id":"k8ssec-003:0","title":"Gatekeeper: Disallow Privileged/Privilege Escalation","text":"apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata: { name: k8snopriv }\nspec:\n  crd: { spec: { names: { kind: K8sNoPriv }}}\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package k8snopriv\n      violation[{\"msg\": msg}] {\n        c := input.review.object.spec.containers[_]\n        c.securityContext.privileged == true\n        msg := sprintf(\"container %q cannot be privileged\", [c.name])\n      }\n      violation[{\"msg\": msg}] {\n        c := input.review.object.spec.containers[_]\n        c.securityContext.allowPrivilegeEscalation == true\n        msg := sprintf(\"container %q cannot allow privilege escalation\", [c.name])\n      }","metadata":{"source":"author","topic":["gatekeeper","privileged"],"section":"admission","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-004","chunk_id":"k8ssec-004:0","title":"Gatekeeper: Require CPU/Memory Requests & Limits","text":"apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata: { name: k8sresourcelimits }\nspec:\n  crd: { spec: { names: { kind: K8sResourceLimits }}}\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package k8sresourcelimits\n      has(v) { v }\n      violation[{\"msg\": msg}] {\n        c := input.review.object.spec.containers[_]\n        not has(c.resources)\n        msg := sprintf(\"container %q must define resources\", [c.name])\n      }\n      violation[{\"msg\": msg}] {\n        c := input.review.object.spec.containers[_]\n        not has(c.resources.requests.cpu)\n        msg := sprintf(\"container %q missing requests.cpu\", [c.name])\n      }\n      violation[{\"msg\": msg}] {\n        c := input.review.object.spec.containers[_]\n        not has(c.resources.requests.memory)\n        msg := sprintf(\"container %q missing requests.memory\", [c.name])\n      }\n      violation[{\"msg\": msg}] {\n        c := input.review.object.spec.containers[_]\n        not has(c.resources.limits.cpu)\n        msg := sprintf(\"container %q missing limits.cpu\", [c.name])\n      }\n      violation[{\"msg\": msg}] {\n        c := input.review.object.spec.containers[_]\n        not has(c.resources.limits.memory)\n        msg := sprintf(\"container %q missing limits.memory\", [c.name])\n      }","metadata":{"source":"author","topic":["gatekeeper","resources"],"section":"admission","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-005","chunk_id":"k8ssec-005:0","title":"NetworkPolicy: Default Deny + Namespace/Label Allow","text":"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata: { name: default-deny, namespace: app }\nspec:\n  podSelector: {}\n  policyTypes: [\"Ingress\",\"Egress\"]\n  ingress: []\n  egress: []\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata: { name: allow-web-to-api, namespace: app }\nspec:\n  podSelector: { matchLabels: { app: api }}\n  ingress:\n  - from:\n    - namespaceSelector: { matchLabels: { name: app }}\n      podSelector: { matchLabels: { app: web }}\n    ports: [{ protocol: TCP, port: 8080 }]","metadata":{"source":"author","topic":["networkpolicy","segmentation"],"section":"networking","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-006","chunk_id":"k8ssec-006:0","title":"Gatekeeper: Required NetworkPolicy Present per Namespace (Soft Check)","text":"# Admission cannot easily assert existence across all pods; use audit to detect missing NetPols\napiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata: { name: k8snetpolhint }\nspec:\n  crd: { spec: { names: { kind: K8sNetpolHint }}}\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package k8snetpolhint\n      violation[{\"msg\": msg}] {\n        input.review.kind.kind == \"Namespace\"\n        not exists_netpol(input.review.object.metadata.name)\n        msg := sprintf(\"Namespace %q should define at least one NetworkPolicy\", [input.review.object.metadata.name])\n      }\n      exists_netpol(ns) { false } # placeholder for audit hint; pair with external audit.","metadata":{"source":"author","topic":["gatekeeper","networkpolicy"],"section":"admission","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-007","chunk_id":"k8ssec-007:0","title":"Gatekeeper: Capabilities & Host Namespace Protections","text":"apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata: { name: k8scapshost }\nspec:\n  crd: { spec: { names: { kind: K8sCapsHost }}}\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package k8scapshost\n      violation[{\"msg\": msg}] { input.review.object.spec.hostNetwork == true; msg := \"hostNetwork not allowed\" }\n      violation[{\"msg\": msg}] { input.review.object.spec.hostPID == true; msg := \"hostPID not allowed\" }\n      violation[{\"msg\": msg}] { input.review.object.spec.hostIPC == true; msg := \"hostIPC not allowed\" }\n      violation[{\"msg\": msg}] {\n        c := input.review.object.spec.containers[_]\n        some addcap\n        addcap := c.securityContext.capabilities.add[_]\n        addcap == \"NET_ADMIN\"; msg := \"NET_ADMIN capability not allowed\"\n      }","metadata":{"source":"author","topic":["gatekeeper","capabilities","host-ns"],"section":"admission","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-008","chunk_id":"k8ssec-008:0","title":"Conftest: Require Image Registry Allowlist (K8s YAML)","text":"package kube.images\n\nallowed = {\"corp.registry.local/\", \"123456789012.dkr.ecr.us-east-1.amazonaws.com/\"}\n\ndeny[msg] {\n  c := input.spec.template.spec.containers[_]\n  not startswith_any(c.image, allowed)\n  msg := sprintf(\"image %s not in allowed registries\", [c.image])\n}\n\nstartswith_any(s, set) { some x; x := set[_]; startswith(s, x) }","metadata":{"source":"author","topic":["conftest","images","supply-chain"],"section":"policy-as-code","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"k8ssec-009","chunk_id":"k8ssec-009:0","title":"Runtime Security Hints","text":"- Run as non-root UID > 10000; set fsGroup if writing to volumes.\n- ReadOnlyRootFilesystem: true for stateless apps.\n- Drop ALL capabilities, then add minimal if required.\n- Configure seccompProfile: { type: RuntimeDefault }.\n- Liveness/Readiness probes required to avoid CrashLoop masking.\n- ImagePullPolicy: IfNotPresent for pinned digests; Always for :latest in dev only.","metadata":{"source":"author","topic":["runtime","hardening"],"section":"ops","standard":["CKS"],"project":"GP-Copilot","lang":"en"}}

{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are the core governance standards in CCSP Domain 3 for cloud platforms?"},{"role":"assistant":"CCSP Domain 3 governance standards emphasize shared responsibility, compliance mapping (e.g., SOC 2, ISO 27001), and risk management. Key: Define policies for access (IAM), data classification, and audit trails. Ensure alignment with cloud provider SLAs and conduct regular GRC assessments. Example: Map controls to NIST SP 800-53 for infrastructure security. Ref: isc2.org/ccsp-domain-3."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"Explain shared responsibility model governance in Domain 3."},{"role":"assistant":"Shared Responsibility: Cloud provider secures infrastructure (physical, hypervisor); customer governs data, apps, access. Standards: Document delineation in policies, train teams, audit annually. Example: AWS customer responsible for IAM policies; provider for EC2 host OS. Use RACI matrix for clarity. Ref: cloudsecurityalliance.org/research/topics/shared-responsibility/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"What governance standards apply to IAM in cloud platforms (Domain 3)?"},{"role":"assistant":"IAM Governance: Enforce least privilege, MFA, role-based access, federated identity (SAML/OIDC). Standards: Regular reviews, just-in-time access (PIM), logging all auth events. Example: Azure AD PIM for temporary elevation; policy: No permanent admin roles. Ref: nist.gov/itl/sp800-63/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"How does Domain 3 address compliance mapping for cloud infrastructure?"},{"role":"assistant":"Compliance Mapping: Align platform controls to frameworks (e.g., PCI-DSS for compute, HIPAA for storage). Standards: Use CSP compliance reports, automate evidence collection, conduct gap analysis. Example: Map AWS VPC security groups to CIS benchmark 4.1 (default deny). Ref: cloudsecurityalliance.org/artifacts/cloud-controls-matrix-ccm/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"Governance standards for virtualization and container security in Domain 3."},{"role":"assistant":"Virtualization/Container Governance: Secure hypervisors (e.g., VMware NSX), enforce container runtime policies (e.g., Docker Bench). Standards: Image scanning, least privilege (non-root), runtime monitoring. Example: Kubernetes PSS baseline profile; policy: Scan all images with Trivy pre-deploy. Ref: cisecurity.org/benchmark/kubernetes."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are risk management standards for cloud networking in Domain 3?"},{"role":"assistant":"Networking Risk Management: Segment via VPCs/subnets, use NACLs/SGs, encrypt traffic (TLS). Standards: Annual risk assessments, zero-trust model, DDoS mitigation. Example: AWS Transit Gateway with inspection; policy: No direct internet access for prod workloads. Ref: nist.gov/itl/sp800-207/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"Domain 3 standards for incident response in cloud infrastructure."},{"role":"assistant":"Incident Response: Integrate with CSP tools (e.g., Azure Security Center), define playbooks for breaches. Standards: 24/7 monitoring, containment within 1hr, post-mortem reviews. Example: Use AWS GuardDuty alerts triggering Lambda for auto-quarantine. Ref: nist.gov/itl/sp800-61/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to govern physical and environmental security in cloud (Domain 3)?"},{"role":"assistant":"Physical/Environmental: Rely on CSP certifications (e.g., SOC 1 Type II), but govern access to on-prem hybrids. Standards: Vendor audits, redundancy (multi-AZ), disaster recovery plans. Example: Azure datacenter SOC reports; policy: Annual third-party audits. Ref: iso.org/standard/27001."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"GRC integration standards for Domain 3 cloud platforms."},{"role":"assistant":"GRC Integration: Embed governance (policies), risk (assessments), compliance (audits) in platform ops. Standards: Automated controls (OPA), continuous monitoring, reporting dashboards. Example: Use ServiceNow GRC with AWS Config for compliance tracking. Ref: isaca.org/resources/cobit/."}]}
{"messages":[{"role":"system","content":"You are an expert in CCSP Domain 3: Cloud Platform & Infrastructure Security, focusing on governance standards. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices for auditing cloud infrastructure under Domain 3."},{"role":"assistant":"Auditing: Enable CSP logging (CloudTrail, Azure Monitor), retain 365+ days, correlate events. Standards: Quarterly audits, anomaly detection, immutable logs. Example: S3 bucket logging to CloudWatch; policy: Alert on unauthorized IAM changes. Ref: cloudsecurityalliance.org/artifacts/cloud-audit/."}]}