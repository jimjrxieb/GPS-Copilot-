{"doc_id":"opa-000","chunk_id":"opa-000:0","title":"OPA Overview","text":"Open Policy Agent (OPA) is a general-purpose policy engine that decouples policy decision-making from application business logic. You load policies (written in Rego) and optional data into OPA, then ask OPA for decisions over JSON inputs.","metadata":{"source":"author","topic":["opa","policy","rego"],"section":"overview","project":"GP-Copilot","lang":"en","created_at":"2025-10-07T14:00:00Z"}}
{"doc_id":"opa-001","chunk_id":"opa-001:0","title":"Rego Language Basics","text":"Rego is a declarative query language for defining policy. You write rules that produce decision results as JSON. A package defines a namespace, rules evaluate expressions over input and data documents, and decisions are the values of rule bodies when conditions are true.","metadata":{"source":"author","topic":["rego","language"],"section":"rego-basics","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-001","chunk_id":"opa-001:1","title":"Rego: Packages and Rules","text":"A Rego file starts with a package, e.g., package authz. Rules have heads (names) and bodies (conditions). The default rule value is false unless proven true. You can set default allow = false and explicitly set allow = true when conditions match.","metadata":{"source":"author","topic":["rego","rules"],"section":"rego-basics","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-001","chunk_id":"opa-001:2","title":"Rego: Input and Data","text":"Rego evaluates over two root documents: input (the decision request context) and data (static or dynamic context loaded into OPA, such as org config). Access them as input.<field> and data.<package>.<path>.","metadata":{"source":"author","topic":["rego","input","data"],"section":"rego-basics","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-002","chunk_id":"opa-002:0","title":"Common Rego Pattern: Default Deny","text":"Policy typically starts with default deny. Example: default allow = false. Then write rules that set allow = true when constraints are satisfied. This prevents implicit allow when conditions are incomplete.","metadata":{"source":"author","topic":["rego","patterns"],"section":"patterns","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-003","chunk_id":"opa-003:0","title":"Example: Role-Based Access Control","text":"A simple RBAC policy uses data.roles to map users to roles and data.permissions to map roles to allowed actions. The decision allow is true if input.subject has a role R such that the requested action and resource are permitted for R.","metadata":{"source":"author","topic":["rego","rbac","authz"],"section":"examples","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-003","chunk_id":"opa-003:1","title":"RBAC Rego Sketch","text":"package authz\n\ndefault allow = false\n\nallow {\n  some r\n  r := data.roles[input.subject]\n  some role in r\n  allowed := data.permissions[role]\n  allowed.action == input.action\n  allowed.resource == input.resource\n}","metadata":{"source":"author","topic":["rego","rbac","snippet"],"section":"examples","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-004","chunk_id":"opa-004:0","title":"Attribute-Based Access Control (ABAC)","text":"ABAC evaluates attributes of subject, action, resource, and environment. In Rego, you can encode attribute checks like input.subject.department == \"finance\" and input.resource.classification == \"public\" to decide allow.","metadata":{"source":"author","topic":["rego","abac","authz"],"section":"examples","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-005","chunk_id":"opa-005:0","title":"Gatekeeper Overview","text":"Gatekeeper integrates OPA with Kubernetes admission control. You define ConstraintTemplates (Rego + schema) and Constraints (instances) to validate resources during create/update. Violations block admission with clear messages.","metadata":{"source":"author","topic":["kubernetes","gatekeeper","admission"],"section":"gatekeeper","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-005","chunk_id":"opa-005:1","title":"Gatekeeper: ConstraintTemplate vs Constraint","text":"ConstraintTemplate packages Rego logic and defines CRD schema for parameters. Constraint binds the template to scope (kinds, namespaces) and parameter values. This separation enables reusable policy logic with instance-specific settings.","metadata":{"source":"author","topic":["kubernetes","gatekeeper"],"section":"gatekeeper","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-006","chunk_id":"opa-006:0","title":"Kubernetes Admission Flow with OPA Gatekeeper","text":"1) User sends request to API server. 2) Mutating webhooks may modify object. 3) Validating webhooks (Gatekeeper) evaluate constraints using Rego. 4) If any constraint denies, the request is rejected with violation messages; else it proceeds to etcd/scheduler.","metadata":{"source":"author","topic":["kubernetes","admission","flow"],"section":"gatekeeper","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-007","chunk_id":"opa-007:0","title":"Conftest for IaC","text":"Conftest uses OPA/Rego to test configuration files (Terraform, Kubernetes YAML, JSON). You write policy files under policy/ and run conftest test <path>. Failing rules produce messages; CI can block merges on violations.","metadata":{"source":"author","topic":["conftest","iac","ci"],"section":"tools","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-008","chunk_id":"opa-008:0","title":"OPA Decision API","text":"OPA exposes a REST API. POST /v1/data/<package>/<rule> with JSON input to evaluate a decision. The response body contains the decision result. You can embed OPA as a sidecar, library, or centralized service.","metadata":{"source":"author","topic":["opa","api","rest"],"section":"integration","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-009","chunk_id":"opa-009:0","title":"Data and Bundles","text":"OPA can load policy and data from local files or via bundles (tar gzipped), fetched from a bundle server on a polling schedule. This supports centralized distribution, versioning, and rollback of policies across fleets.","metadata":{"source":"author","topic":["opa","bundles","distribution"],"section":"operations","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-010","chunk_id":"opa-010:0","title":"Partial Evaluation","text":"Partial evaluation precomputes parts of a policy given known inputs to produce a residual policy. Useful for high-QPS systems where some attributes are static (e.g., tenant policy), reducing per-request computation.","metadata":{"source":"author","topic":["rego","performance","partial-eval"],"section":"advanced","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-011","chunk_id":"opa-011:0","title":"Policy Testing with `opa test`","text":"Write unit tests in Rego using the test namespace (e.g., package authz_test). Use opa test to execute tests against policies and data. Tests improve maintainability and enable CI gating.","metadata":{"source":"author","topic":["testing","opa"],"section":"testing","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-012","chunk_id":"opa-012:0","title":"Decision Logging","text":"OPA can emit decision logs containing input, decision id, and outcome (redactable fields supported). Logs feed auditing, SIEM, and policy analytics. Configure via decision_logs in OPA config.","metadata":{"source":"author","topic":["logging","audit"],"section":"operations","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-013","chunk_id":"opa-013:0","title":"Envoy + OPA for API Authorization","text":"Deploy OPA as an external authorization service for Envoy. Envoy sends check requests with HTTP method, path, headers. Rego evaluates allow based on policies (RBAC/ABAC) and returns OK or Denied with details.","metadata":{"source":"author","topic":["envoy","authz","opa"],"section":"integration","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-014","chunk_id":"opa-014:0","title":"Rego Collections and Iteration","text":"Use comprehensions and quantifiers: some x in arr; all/any style with not/exists patterns. Avoid O(n^2) where possible by indexing data into sets or maps for faster membership tests.","metadata":{"source":"author","topic":["rego","performance","collections"],"section":"language","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-015","chunk_id":"opa-015:0","title":"Performance Tips","text":"Profile with opa eval --profile. Convert repeated lookups to sets, pre-compute indexes in data, prefer straight comparisons over regex when possible, and leverage partial evaluation. Minimize gigantic input payloads.","metadata":{"source":"author","topic":["performance","tuning"],"section":"advanced","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-016","chunk_id":"opa-016:0","title":"Kubernetes Example: Enforce Image Registry","text":"A Gatekeeper template can enforce that container images come from an approved registry, e.g., corp.registry.local/. Constraint parameter provides allowed prefixes; Rego denies if any container image not startswith approved prefixes.","metadata":{"source":"author","topic":["kubernetes","policy","images"],"section":"examples","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-017","chunk_id":"opa-017:0","title":"Terraform Example: Disallow Public S3","text":"Conftest policy scans Terraform resources and denies aws_s3_bucket with acl set to public-read or public-read-write, or public bucket policies. Encourage bucket policies with condition restricting aws:SourceIp or aws:PrincipalOrgID.","metadata":{"source":"author","topic":["terraform","s3","policy"],"section":"examples","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-018","chunk_id":"opa-018:0","title":"Policy Packaging & Modules","text":"Organize policies into modules by domain (k8s, terraform, api). Use clear package names, expose public decision rules, hide helper rules by naming convention and documentation. Keep messages actionable.","metadata":{"source":"author","topic":["packages","modules","design"],"section":"design","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-019","chunk_id":"opa-019:0","title":"Inputs: Shape and Validation","text":"Define and document expected input shape. Validate presence of required fields with conditions early. Consider adding schema checks in the calling app or with rego helpers to avoid nil dereferences.","metadata":{"source":"author","topic":["input","validation"],"section":"design","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-020","chunk_id":"opa-020:0","title":"Messages and UX","text":"Return clear, user-friendly violation messages with specifics: which field, what value, and how to remediate. Good messages reduce friction and speed adoption in CI/CD and admission workflows.","metadata":{"source":"author","topic":["ux","messages"],"section":"design","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-021","chunk_id":"opa-021:0","title":"Policy Lifecycle","text":"Establish environments for policy dev, staging, and prod. Use versioned bundles, tests, and change approval. Track coverage and impact; rollback safely when violations surge.","metadata":{"source":"author","topic":["lifecycle","governance"],"section":"operations","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-022","chunk_id":"opa-022:0","title":"Security Considerations","text":"Treat policies as code: code review, static checks, least-privilege data access, secret redaction in decision logs, and strict input validation. Avoid loading sensitive raw secrets into data unless necessary and protected.","metadata":{"source":"author","topic":["security","best-practices"],"section":"security","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-023","chunk_id":"opa-023:0","title":"Testing Pattern: Table-Driven","text":"Create test inputs array and expected outcomes, iterate in test rules to assert decisions. This keeps tests concise and scales scenarios. Use helpers to generate inputs for edge cases.","metadata":{"source":"author","topic":["testing","patterns"],"section":"testing","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-024","chunk_id":"opa-024:0","title":"Decision Outcomes: Booleans vs Objects","text":"Decide on decision shape: boolean allow/deny is simple, but objects `{allow: bool, reasons: [...], attrs: {...}}` carry richer context for UIs and logs. Keep it consistent.","metadata":{"source":"author","topic":["design","decision-shape"],"section":"design","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-025","chunk_id":"opa-025:0","title":"Policy Distribution Topologies","text":"Sidecar per service, local daemon on host, or centralized OPA with client libraries/proxies. Choose based on latency, isolation, and operational complexity. Bundles help standardize across topologies.","metadata":{"source":"author","topic":["architecture","topology"],"section":"operations","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-026","chunk_id":"opa-026:0","title":"Common Gotchas","text":"Nil dereferences on input paths, string vs number comparisons, unintended set semantics, performance hits from nested loops, and over-reliance on regex. Add guards, cast types, and pre-index data.","metadata":{"source":"author","topic":["gotchas","debugging"],"section":"troubleshooting","project":"GP-Copilot","lang":"en"}}
{"doc_id":"opa-027","chunk_id":"opa-027:0","title":"Debugging Rego","text":"Use opa eval -i input.json -d policy.rego to iterate locally. Add print() for quick inspection (ensure log config). Prefer unit tests with opa test for stable debugging and regression coverage.","metadata":{"source":"author","topic":["debugging","tools"],"section":"troubleshooting","project":"GP-Copilot","lang":"en"}}
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "What is OPA Gatekeeper?"}, {"role": "assistant", "content": "OPA Gatekeeper is a customizable admission controller for Kubernetes that uses the Open Policy Agent (OPA) to enforce policies. It allows you to define and apply custom policies via ConstraintTemplates and Constraints, validating resources at admission time to ensure compliance with organizational rules."}]}
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "How does Gatekeeper integrate with OPA?"}, {"role": "assistant", "content": "Gatekeeper integrates OPA as its policy engine. It acts as a Kubernetes admission webhook, sending resource requests to OPA for evaluation using Rego policies. Gatekeeper uses CRDs like ConstraintTemplates (defining Rego logic) and Constraints (applying policies to scopes) to manage enforcement declaratively."}]}
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "What is a ConstraintTemplate in Gatekeeper?"}, {"role": "assistant", "content": "A ConstraintTemplate is a Gatekeeper CRD that defines a reusable policy using Rego code. It includes a schema for parameters and targets the admission.k8s.gatekeeper.sh target. Example:\n\napiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8srequiredlabels\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sRequiredLabels\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8srequiredlabels\n        violation[{\"msg\": msg}] {\n          missing := input.parameters.labels - {lbl | lbl := input.review.object.metadata.labels[_]}\n          count(missing) > 0\n          msg := sprintf(\"missing labels: %v\", [missing])\n        }"}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "How do you create a Constraint in Gatekeeper?"}, {"role": "assistant", "content": "A Constraint applies a ConstraintTemplate to specific Kubernetes resources. It specifies the match criteria and parameters. Example for requiring labels on namespaces:\n\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: ns-must-have-gk-label\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Namespace\"]\n  parameters:\n    labels: [\"gatekeeper\"]"}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Explain Rego in the context of OPA."}, {"role": "assistant", "content": "Rego is OPA's declarative policy language for defining rules that evaluate JSON inputs. In Gatekeeper, Rego is used in ConstraintTemplates to check for violations. It uses packages, rules, and built-ins like 'input' for the Kubernetes resource being reviewed. Policies output violations as arrays of objects with 'msg' fields for deny reasons."}]}
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "What are some common policies in the Gatekeeper library?"}, {"role": "assistant", "content": "The Gatekeeper library includes policies like:\n- HTTPSOnly: Ensures Ingress resources use HTTPS.\n- AllowedRepos: Restricts container images to approved registries.\n- RequiredLabels: Enforces specific labels on resources.\n- NoPrivilegedContainers: Blocks pods with privileged containers.\nYou can find them in the open-policy-agent/gatekeeper-library GitHub repo."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "How does Gatekeeper handle external data?"}, {"role": "assistant", "content": "Gatekeeper supports external data via providers (in-cluster components) that fetch info from sources like image registries or LDAP. It uses the 'external_data' built-in in Rego to request and cache responses. Caching defaults to 3 minutes TTL, available since v3.13+ for audit and validation."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "What is the difference between validation and mutation in Gatekeeper?"}, {"role": "assistant", "content": "Validation checks resources and denies non-compliant ones (using 'violation' rules in Rego). Mutation modifies resources automatically before creation/update, e.g., adding labels. Gatekeeper supports validation fully; mutation is in progress and uses 'mutation' targets in templates."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "How to install Gatekeeper on Kubernetes?"}, {"role": "assistant", "content": "Install Gatekeeper using Helm:\n\nhelm repo add gatekeeper https://open-policy-agent.github.io/gatekeeper/charts\nhelm install gatekeeper/gatekeeper --namespace gatekeeper-system --create-namespace\n\nOr use the YAML manifests from the GitHub releases. Verify with 'kubectl get pods -n gatekeeper-system'."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Explain auditing in Gatekeeper."}, {"role": "assistant", "content": "Auditing in Gatekeeper scans existing cluster resources for policy compliance without blocking. Use 'kubectl audit' commands or set constraints with 'enforcementAction: dryrun' for warn mode. It generates reports on violations, integrable with tools like Prometheus."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "What are some best practices for Gatekeeper policies?"}, {"role": "assistant", "content": "Best practices:\n- Start with dry-run mode to test policies.\n- Use specific matchers to scope constraints narrowly.\n- Parameterize templates for reusability.\n- Monitor performance; complex Rego can slow admissions.\n- Version policies and use the library for tested ones.\n- Combine with other admission controllers carefully."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "How does Gatekeeper handle mutations?"}, {"role": "assistant", "content": "Mutations in Gatekeeper (beta in recent versions) allow modifying resources via Rego rules that output patches. Use 'mutationReview' in input and define rules to generate JSON patches. Apply with 'kubectl apply' on templates supporting mutations, like adding default annotations."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Troubleshoot a Gatekeeper denial."}, {"role": "assistant", "content": "To troubleshoot:\n1. Check events: 'kubectl describe <resource>' for violation messages.\n2. Review Gatekeeper logs: 'kubectl logs -n gatekeeper-system deploy/gatekeeper-controller-manager'.\n3. Use 'gatekeeper audit' for existing resources.\n4. Test Rego with OPA's online playground.\n5. Ensure constraint matchers align with the resource."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Compare OPA standalone vs Gatekeeper."}, {"role": "assistant", "content": "OPA standalone is a general policy engine for any JSON input, flexible for non-K8s uses. Gatekeeper is K8s-specific, providing CRDs for templates/constraints, admission webhook integration, and audit features. Use Gatekeeper for K8s; OPA for broader apps like CI/CD or APIs."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Example: Policy to block privileged pods."}, {"role": "assistant", "content": "Use the NoPrivilegedContainers template from the library.\n\nConstraint:\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sNoPrivilegedContainers\nmetadata:\n  name: no-privileged\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n\nThis denies pods with securityContext.privileged: true."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "What is the OPA Constraint Framework?"}, {"role": "assistant", "content": "The OPA Constraint Framework defines reusable policy components: libraries (shared Rego), templates (policy blueprints), and constraints (instances). Gatekeeper implements it with K8s CRDs, enabling declarative policy management across clusters."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "How to use external data in Rego for Gatekeeper?"}, {"role": "assistant", "content": "In Rego, use data.external_data.get(url, params) to fetch from providers. Example:\n\nprovider_response := data.external_data.get(\"http://provider/vulncheck\", {\"image\": input.review.object.spec.containers[0].image})\nviolations := provider_response.body.vulnerabilities\n\nProviders run as deployments returning JSON responses."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Performance tips for Gatekeeper."}, {"role": "assistant", "content": "Tips:\n- Compile Rego to WASM for faster eval.\n- Use caching for external data.\n- Limit constraint scopes.\n- Monitor webhook latency with Prometheus.\n- Avoid heavy computations in policies.\n- Scale controller-manager replicas for high-traffic clusters."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Integrate Gatekeeper with Azure Policy."}, {"role": "assistant", "content": "Azure Policy for Kubernetes uses Gatekeeper under the hood for AKS and Arc-enabled clusters. Define policies in Azure portal; they translate to Gatekeeper constraints. Supports built-in audits and enforcement for compliance like CIS benchmarks."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Example: Require image from approved repo."}, {"role": "assistant", "content": "Use AllowedRepos template.\n\nConstraint:\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sAllowedRepos\nmetadata:\n  name: approved-images\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n  parameters:\n    repos:\n      - \"myregistry.com/*\"\n\nDenies images not matching the regex."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "What versions of Gatekeeper support mutations?"}, {"role": "assistant", "content": "Full mutation support is in Gatekeeper v3.7+. Earlier versions had beta. Use 'targets' with 'mutation.k8s.gatekeeper.sh' and output 'mutation.patchStrategicMerge' or JSON patches in Rego."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Debug Rego policies."}, {"role": "assistant", "content": "Debug with:\n- OPA CLI: 'opa eval -i input.json -d policy.rego \"data.policy.allow\"'.\n- Gatekeeper's test suite in library.\n- Logs with trace: Set --log-level=debug.\n- Online Rego playground with sample inputs."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Use Gatekeeper with Rancher."}, {"role": "assistant", "content": "Rancher provides Gatekeeper as an official app in the catalog. Install via Rancher UI, configure policies through the integrated policy management UI, leveraging Gatekeeper's CRDs for cluster-wide enforcement."}] }
{"messages": [{"role": "system", "content": "You are an expert in Open Policy Agent (OPA) and Gatekeeper for Kubernetes policy enforcement. Provide accurate, concise explanations and examples."}, {"role": "user", "content": "Policy for HTTPS-only Ingress."}, {"role": "assistant", "content": "From library: HTTPSOnly template.\n\nConstraint:\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sHTTPSOnly\nmetadata:\n  name: https-only\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"networking.k8s.io\"]\n        kinds: [\"Ingress\"]\n\nBlocks Ingress without TLS spec."}] }
{"entity_id":"ent:OPA","type":"Project","label":"Open Policy Agent","aliases":["OPA"],"source_doc_id":"opa-000","attrs":{"domain":"policy-engine"}}
{"entity_id":"ent:Rego","type":"Language","label":"Rego","aliases":[],"source_doc_id":"opa-001","attrs":{"paradigm":"declarative"}}
{"entity_id":"ent:Gatekeeper","type":"Component","label":"OPA Gatekeeper","aliases":["Gatekeeper"],"source_doc_id":"opa-005","attrs":{"platform":"kubernetes"}}
{"entity_id":"ent:Conftest","type":"Tool","label":"Conftest","aliases":[],"source_doc_id":"opa-007","attrs":{"use":"config-testing"}}
{"entity_id":"ent:EnvoyExtAuthZ","type":"Integration","label":"Envoy External AuthZ with OPA","aliases":["Envoy+OPA"],"source_doc_id":"opa-013","attrs":{"pattern":"ext_authz"}}
{"entity_id":"ent:RBAC","type":"Model","label":"Role-Based Access Control","aliases":["RBAC"],"source_doc_id":"opa-003"}
{"entity_id":"ent:ABAC","type":"Model","label":"Attribute-Based Access Control","aliases":["ABAC"],"source_doc_id":"opa-004"}
{"entity_id":"ent:Bundles","type":"Concept","label":"OPA Bundles","aliases":["Policy Bundles"],"source_doc_id":"opa-009"}
{"entity_id":"ent:PartialEval","type":"Concept","label":"Partial Evaluation","aliases":["Partial Eval"],"source_doc_id":"opa-010"}
{"entity_id":"ent:DecisionLogs","type":"Concept","label":"Decision Logs","aliases":[],"source_doc_id":"opa-012"}
{"entity_id":"ent:K8sAdmission","type":"Concept","label":"Kubernetes Admission Control","aliases":["Admission"],"source_doc_id":"opa-006"}
{"entity_id":"ent:ConformanceCI","type":"Concept","label":"Policy in CI/CD","aliases":["Conformance CI"],"source_doc_id":"opa-007"}
{"head":"ent:OPA","relation":"implements","tail":"ent:Rego","evidence":{"doc_id":"opa-001","chunk_id":"opa-001:0"},"confidence":0.98}
{"head":"ent:Gatekeeper","relation":"uses","tail":"ent:OPA","evidence":{"doc_id":"opa-005","chunk_id":"opa-005:0"},"confidence":0.97}
{"head":"ent:Gatekeeper","relation":"enforces","tail":"ent:K8sAdmission","evidence":{"doc_id":"opa-006","chunk_id":"opa-006:0"},"confidence":0.96}
{"head":"ent:Conftest","relation":"uses","tail":"ent:OPA","evidence":{"doc_id":"opa-007","chunk_id":"opa-007:0"},"confidence":0.95}
{"head":"ent:EnvoyExtAuthZ","relation":"integrates_with","tail":"ent:OPA","evidence":{"doc_id":"opa-013","chunk_id":"opa-013:0"},"confidence":0.94}
{"head":"ent:RBAC","relation":"modeled_in","tail":"ent:Rego","evidence":{"doc_id":"opa-003","chunk_id":"opa-003:0"},"confidence":0.93}
{"head":"ent:ABAC","relation":"modeled_in","tail":"ent:Rego","evidence":{"doc_id":"opa-004","chunk_id":"opa-004:0"},"confidence":0.93}
{"head":"ent:Bundles","relation":"distributes","tail":"ent:OPA","evidence":{"doc_id":"opa-009","chunk_id":"opa-009:0"},"confidence":0.92}
{"head":"ent:PartialEval","relation":"optimizes","tail":"ent:Rego","evidence":{"doc_id":"opa-010","chunk_id":"opa-010:0"},"confidence":0.92}
{"head":"ent:DecisionLogs","relation":"audits","tail":"ent:OPA","evidence":{"doc_id":"opa-012","chunk_id":"opa-012:0"},"confidence":0.91}
{"head":"ent:ConformanceCI","relation":"applies_to","tail":"ent:Conftest","evidence":{"doc_id":"opa-007","chunk_id":"opa-007:0"},"confidence":0.9}
{"head":"ent:ConformanceCI","relation":"applies_to","tail":"ent:Gatekeeper","evidence":{"doc_id":"opa-005","chunk_id":"opa-005:1"},"confidence":0.9}


{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"What is ArgoCD and its role in GitOps?"},{"role":"assistant","content":"ArgoCD is a declarative GitOps continuous delivery (CD) tool for Kubernetes. It automates deployments by treating Git as the single source of truth for application configurations, monitoring repositories for changes, and syncing the desired state to clusters. This ensures drift detection, automated rollouts, and auditable deployments, ideal for DevSecOps pipelines integrating with Helm, Kustomize, and CI systems like GitHub Actions."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How do GitOps workflows with ArgoCD emphasize declarative infrastructure?"},{"role":"assistant","content":"GitOps workflows with ArgoCD emphasize declarative infrastructure where all manifests (YAML, Helm charts, etc.) live in Git. ArgoCD handles synchronization, rollbacks, and health checks. Unlike imperative tools (e.g., direct Helm installs), ArgoCD provides a UI, API, and CLI for visualization and management."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Explain the key concepts: Desired vs. Live State in ArgoCD."},{"role":"assistant","content":"Desired vs. Live State: ArgoCD compares the Git-defined 'desired' state against the cluster's 'live' state. If out-of-sync (e.g., due to manual kubectl edits), it flags deviations and can auto-sync."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are Applications in ArgoCD?"},{"role":"assistant","content":"Applications: Core resource representing a deployed app, pointing to a Git path with manifests."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Describe Sync Policies in ArgoCD."},{"role":"assistant","content":"Sync Policies: Define automation (auto-sync) or manual approval, with options for pruning deleted resources or self-healing."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How does ArgoCD support multi-cluster management?"},{"role":"assistant","content":"Multi-Cluster Support: Manage apps across multiple K8s clusters from one ArgoCD instance."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are Hooks in ArgoCD workflows?"},{"role":"assistant","content":"Hooks: Pre/Post-sync jobs for complex rollouts (e.g., blue-green via Argo Rollouts integration)."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Step-by-step: How to install ArgoCD?"},{"role":"assistant","content":"Install ArgoCD: Create a namespace and apply manifests.\n\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\nWait for pods: `kubectl get pods -n argocd`. Access UI via port-forward: `kubectl port-forward svc/argocd-server -n argocd 8080:443`."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to login and configure ArgoCD initially?"},{"role":"assistant","content":"Login and Configure: Get initial password from `kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d`. Login as `admin` at `https://localhost:8080`."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to set up the ArgoCD CLI?"},{"role":"assistant","content":"CLI Setup: Install ArgoCD CLI (`brew install argocd` or download binary), then `argocd login localhost:8080 --insecure --username admin --password <pwd>`."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Describe a typical GitOps workflow with GitHub Actions CI for ArgoCD."},{"role":"assistant","content":"A typical GitOps workflow combines CI (build/push artifacts) with CD (ArgoCD syncs from Git). Use separate repos: App Repo for code/Dockerfile/CI, GitOps Repo for manifests. CI builds image, updates GitOps values.yaml with tag, commits/pushes. ArgoCD auto-syncs on change."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Provide an example CI Workflow YAML for building and updating GitOps repo."},{"role":"assistant","content":"CI Workflow (`.github/workflows/ci.yml` in App Repo):\n```yaml\nname: Build and Update GitOps\non:\n  push:\n    branches: [main]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Build & Push Image\n      uses: docker/build-push-action@v5\n      with:\n        push: true\n        tags: ghcr.io/user/myapp:${{ github.sha }}\n    - name: Update GitOps Repo\n      uses: actions/checkout@v4\n      with:\n        repository: user/argocd-manifests\n        token: ${{ secrets.GH_TOKEN }}\n        ref: main\n      run: |\n        sed -i 's/tag: .*/tag: \"${{ github.sha }}\"/' nginx/values.yaml\n        git config user.name \"GitHub Action\"\n        git config user.email \"action@github.com\"\n        git add .\n        git commit -m \"Update image tag ${{ github.sha }}\"\n        git push\n```\nThis builds the image, pushes to GHCR, and commits the updated `values.yaml` to the GitOps repo."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to create an ArgoCD Application CRD for a Helm-based app?"},{"role":"assistant","content":"Create ArgoCD Application (via UI or YAML):\nApply this `Application` CRD:\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-nginx-app\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/user/argocd-manifests.git\n    targetRevision: HEAD\n    path: nginx\n    helm:\n      valueFiles:\n      - values.yaml\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  syncPolicy:\n    automated:\n      prune: true  # Delete removed resources\n      selfHeal: true  # Auto-fix drift\n    syncOptions:\n    - CreateNamespace=true\n```\nArgoCD watches the GitOps repo; on commit (from CI), it auto-syncs the Helm release."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to sync and verify an ArgoCD application?"},{"role":"assistant","content":"Sync and Verify: In ArgoCD UI, view the app's tree, health, and sync status. Manual sync: `argocd app sync my-nginx-app`."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are best practices for branching strategy in ArgoCD GitOps?"},{"role":"assistant","content":"Branching Strategy: Use `main` for prod, feature branches for previews; pin to tags for stability."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices for security in ArgoCD workflows."},{"role":"assistant","content":"Security: Enable RBAC, use short-lived tokens, and integrate with OPA Gatekeeper for policy enforcement on syncs. Scan manifests in CI with Trivy."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to handle multi-environment setups in ArgoCD?"},{"role":"assistant","content":"Multi-Env: Separate apps per env (dev/staging/prod) with different Git paths or repos."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to perform rollbacks in ArgoCD?"},{"role":"assistant","content":"Rollback: `argocd app rollback my-app <revision>` or Git revert + sync."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"What monitoring options are available for ArgoCD?"},{"role":"assistant","content":"Monitoring: Integrate Prometheus for metrics; use ArgoCD Notifications for alerts."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Advanced integrations for ArgoCD workflows."},{"role":"assistant","content":"Advanced: Pair with Argo Workflows for CI (e.g., build pipelines) or Argo Rollouts for progressive delivery."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to integrate ArgoCD with Azure AKS?"},{"role":"assistant","content":"For Azure AKS integration, enable as a cluster extension for managed GitOps."}] }
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Where to start with hands-on ArgoCD practice?"},{"role":"assistant","content":"Start with the official quickstart for hands-on practice. If integrating with Helm, ArgoCD natively supports charts for parameterized deploys."}] }

{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Explain the App-of-Apps pattern in advanced ArgoCD workflows."},{"role":"assistant":"App-of-Apps: Deploys multiple child Applications from a parent Application CRD, enabling hierarchical management for complex setups like microservices.\n\nExample parent app:\n```yaml:disable-run"}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to implement sync waves in ArgoCD for ordered deployments?"},{"role":"assistant":"Sync Waves: Use annotations to sequence resource creation/deletion (e.g., DB before app).\n\nExample in Deployment:\n```yaml\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-wave: \"2\"\n```\n\nWaves run in order (lower first). ConfigMap: wave \"1\", Service: \"0\". Supports hooks. Ref: argoproj.github.io/argo-cd/user-guide/sync-waves/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Integrate Argo Rollouts with ArgoCD for progressive delivery."},{"role":"assistant":"Argo Rollouts: Enables canary/blue-green via Deployment replacement.\n\nIn GitOps repo, use Rollout CRD instead of Deployment:\n```yaml\napiVersion: argoprollouts.argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: my-rollout\nspec:\n  strategy:\n    canary:\n      steps:\n      - setWeight: 20\n      - pause: {}\n  replicas: 5\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v1\n```\n\nArgoCD syncs; Rollouts handles traffic. Ref: argoproj.github.io/argo-rollouts/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"What is multi-tenancy in ArgoCD advanced setups?"},{"role":"assistant":"Multi-Tenancy: Isolate teams via Projects (RBAC, repo restrictions) and separate namespaces.\n\nExample Project:\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: team-a\nspec:\n  sourceRepos:\n  - https://github.com/team-a/*\n  destinations:\n  - namespace: team-a-*\n    server: https://kubernetes.default.svc\n  roles:\n  - name: team-a-user\n    policies:\n    - p, role:team-a-user, applications, *, team-a-apps/*, allow\n```\n\nApps scoped to project. Ref: argoproj.github.io/argo-cd/user-guide/projects/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to use ArgoCD webhooks for validation in workflows?"},{"role":"assistant":"Webhooks: Trigger syncs or validations on Git events.\n\nConfigure in argocd-cm ConfigMap:\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  webhook.gitlab.secret: $secret\n  repositories: |\n  - url: https://gitlab.com/user/repo\n    webhook:\n      secret: $secret\n      apiVersion: v4\n      projectID: 123\n      type: gitlab\n```\n\nValidates PRs pre-merge. Ref: argoproj.github.io/argo-cd/operator-manual/webhook/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Implement canary deployments with ArgoCD and Rollouts."},{"role":"assistant":"Canary: Gradually shift traffic in Rollouts.\n\nExtend Rollout spec:\n```yaml\nspec:\n  strategy:\n    canary:\n      canaryService: canary-svc\n      stableService: stable-svc\n      steps:\n      - setWeight: 10\n      - pause:\n          duration: 300  # 5min\n      - setWeight: 50\n      - pause: {}\n      - setWeight: 100\n  trafficRouting:\n    istio:\n      virtualService:\n        name: my-vs\n        routes:\n        - myapp-stable\n        - myapp-canary\n```\n\nArgoCD deploys; Istio routes. Ref: argoproj.github.io/argo-rollouts/user-guide/canary/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to handle custom resources and operators in ArgoCD?"},{"role":"assistant":"Custom Resources: ArgoCD syncs CRDs/operators like any manifest.\n\nInstall CRD first (via wave 0), then operator.\n\nExample App for Operator:\n```yaml\nspec:\n  source:\n    path: operators/tekton\n    repoURL: https://github.com/user/gitops\n  ignoreDifferences:\n  - group: tekton.dev\n    kind: Pipeline\n    jsonPointers:\n    - /spec\n```\n\nHandles finalizers. Ref: argoproj.github.io/argo-cd/user-guide/custom-resources/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Advanced: Rollout analysis in ArgoCD workflows."},{"role":"assistant":"Rollout Analysis: Metrics-driven decisions in Argo Rollouts.\n\nAdd analysis step:\n```yaml\nsteps:\n- setWeight: 20\n- analysis:\n    templates:\n    - templateName: success-rate\n    args:\n    - name: service-name\n      value: myapp-stable\n  pause: {}\n```\n\nTemplate (Prometheus):\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AnalysisTemplate\nmetadata:\n  name: success-rate\nspec:\n  metrics:\n  - name: success-rate\n    interval: 1m\n    successCondition: result[0].count >= 0.95\n    provider:\n      prometheus:\n        address: http://prometheus:9090\n        query: |\n          sum(rate(http_requests_total{status!~\"5..\"}[2m])) /\n          sum(rate(http_requests_total[2m]))\n```\n\nPauses if metric fails. Ref: argoproj.github.io/argo-rollouts/user-guide/analysis/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Disaster recovery strategies for ArgoCD."},{"role":"assistant":"Disaster Recovery: Backup ArgoCD DB (etcd/Postgres), use HA mode with 3+ replicas.\n\nEnable HA:\n```yaml\n# In install manifests, set argocd-repo-server replicas: 3\n```\n\nBackup: `velero backup create argocd-backup --include-namespaces argocd`.\n\nDR: Restore to new cluster, re-point apps to Git. Use external DB for persistence. Ref: argoproj.github.io/argo-cd/operator-manual/high_availability/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Integrate ArgoCD with OPA Gatekeeper for policy enforcement."},{"role":"assistant":"OPA Gatekeeper: Enforce policies on ArgoCD syncs via admission webhook.\n\nInstall Gatekeeper, create ConstraintTemplate for ArgoCD apps.\n\nExample Rego in template:\n```rego\npackage argocd\nviolation[{\"msg\": msg}] {\n  input.review.object.spec.source.path == \"\"\n  msg := \"Path required for app\"\n}\n```\n\nConstraint:\n```yaml\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredPath\nmetadata:\n  name: argocd-path\nspec:\n  match:\n    kinds:\n    - apiGroups: [\"argoproj.io\"]\n      kinds: [\"Application\"]\n```\n\nBlocks invalid apps. Ref: argoproj.github.io/argo-cd/user-guide/policy/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Blue-green deployments using ArgoCD hooks."},{"role":"assistant":"Blue-Green: Use pre-sync hook for blue (new), post-sync for switch.\n\nHook Job:\n```yaml\nmetadata:\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n    argocd.argoproj.io/hook-weight: \"-1\"\nspec:\n  template:\n    spec:\n      containers:\n      - name: blue-deploy\n        image: busybox\n        command: [\"sh\", \"-c\", \"echo Deploying blue\"]\n```\n\nPost-sync: Update service selector. Ref: argoproj.github.io/argo-cd/user-guide/user-guide/hooks/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Advanced multi-cluster federation in ArgoCD."},{"role":"assistant":"Multi-Cluster Federation: Use ApplicationSet with generators for dynamic apps across clusters.\n\nExample ApplicationSet:\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\ngenerators:\n- Clusters: {}\n  template:\n    metadata:\n      name: '{{name}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/user/gitops\n        path: apps/{{name}}\n      destination:\n        server: https://{{server}}\n        namespace: {{name}}\n```\n\nAuto-creates per cluster. Ref: argoproj.github.io/applicationset/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Custom notifications in ArgoCD workflows."},{"role":"assistant":"Notifications: Alert on sync failures via Slack/Email.\n\nConfigMap:\n```yaml\napiVersion: v1\nkind: ConfigMap\ndata:\n  config: |\n    application:\n      notifications:\n      - name: sync-failed\n        triggers:\n        - on-health-degraded\n        template: |\n          message: App {{.app.name}} degraded\n        slack:\n          channel: \"#devops\"\n          token:\n            name: slack-secret\n            key: token\n```\n\nRef: argoproj.github.io/argo-cd/user-guide/notifications/."}]}
{"messages":[{"role":"system","content":"You are an expert in ArgoCD, GitOps workflows, and Kubernetes continuous delivery. Provide accurate, concise explanations and examples."},{"role":"user","content":"Handle large-scale apps with ArgoCD resource customization."},{"role":"assistant":"Large-Scale: Customize resource limits, ignore diffs for dynamic fields.\n\nApp spec:\n```yaml\nspec:\n  resource:\n    customResource:\n      cpu: 100m\n      memory: 128Mi\n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    jsonPointers:\n    - /spec/replicas\n```\n\nBatch syncs with --parallelism. Ref: argoproj.github.io/argo-cd/user-guide/resource_customization/."}]}

