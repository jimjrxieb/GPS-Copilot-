{"messages":[{"role":"system","content":"You are an expert in cybersecurity hygiene, vulnerability management, compliance, and DevSecOps practices. Provide accurate, concise explanations and examples."},{"role":"user","content":"What is involved in leading cyber hygiene strategy and implementation?"},{"role":"assistant":"Leading cyber hygiene involves developing and executing processes, policies, and procedures for secure configuration, patching, vulnerability management, and risk mitigation. Example: Implement automated patching via Ansible for servers, ensuring 100% coverage within 72 hours for critical vulns, aligned with NIST 800-53."}]}
{"messages":[{"role":"system","content":"You are an expert in cybersecurity hygiene, vulnerability management, compliance, and DevSecOps practices. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to partner with engineering for secure architecture design?"},{"role":"assistant":"Partner by embedding security in SDLC: Review designs for least privilege, encryption, and segmentation. Example: Use threat modeling (STRIDE) in workshops to design AWS VPCs with private subnets, NACLs, and WAF, ensuring zero-trust principles."}]}
{"messages":[{"role":"system","content":"You are an expert in cybersecurity hygiene, vulnerability management, compliance, and DevSecOps practices. Provide accurate, concise explanations and examples."},{"role":"user","content":"Describe the vulnerability management lifecycle oversight."},{"role":"assistant":"Oversee identification (scans), prioritization (CVSS), remediation (patching/SOPs), verification, and reporting. Example: Use Tenable for scans, Jira for tickets; SLA: Critical vulns remediated in 7 days, with quarterly dashboards showing MTTR."}]}
{"messages":[{"role":"system","content":"You are an expert in cybersecurity hygiene, vulnerability management, compliance, and DevSecOps practices. Provide accurate, concise explanations and examples."},{"role":"user","content":"What standards ensure timely patching of vulnerabilities?"},{"role":"assistant":"Standards: Automate with tools like WSUS/Ansible, prioritize by risk (e.g., EPSS scores), test in staging. Example: Policy: Patch high/critical within 30 days; use AWS SSM for EC2, tracking via Defender for Cloud reports."}]}
{"messages":[{"role":"system","content":"You are an expert in cybersecurity hygiene, vulnerability management, compliance, and DevSecOps practices. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to ensure compliance and conduct audits for cybersecurity hygiene?"},{"role":"assistant":"Ensure via policy enforcement (e.g., CIS benchmarks), regular audits (internal/external). Example: Map controls to PCI-DSS 6.1; use Azure Policy for audits, remediating gaps with 90-day action plans and evidence in GRC tools like RSA Archer."}]}
{"messages":[{"role":"system","content":"You are an expert in cybersecurity hygiene, vulnerability management, compliance, and DevSecOps practices. Provide accurate, concise explanations and examples."},{"role":"user","content":"Strategies for training and awareness on cyber hygiene."},{"role":"assistant":"Strategies: Mandatory annual training, phishing sims, role-based modules. Example: Use KnowBe4 for phishing; quarterly lunch-n-learns on secure coding, tracking completion >95% via LMS, with metrics on reduced incidents."}]}
{"messages":[{"role":"system","content":"You are an expert in cybersecurity hygiene, vulnerability management, compliance, and DevSecOps practices. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to drive continuous improvement in cyber hygiene posture?"},{"role":"assistant":"Drive via lessons learned reviews, threat intel integration, maturity assessments (e.g., CMMI). Example: Post-incident RCA leading to automated config scans; annual tabletop exercises, benchmarking against peers for 20% annual improvement in metrics."}]}
{"messages":[{"role":"system","content":"You are an expert in cybersecurity hygiene, vulnerability management, compliance, and DevSecOps practices. Provide accurate, concise explanations and examples."},{"role":"user","content":"What metrics and reporting are key for cyber hygiene initiatives?"},{"role":"assistant":"Metrics: Patch compliance rate (>98%), vuln remediation time (MTTR <14 days), training completion (100%), audit findings closed (90% quarterly). Reporting: Dashboards in Splunk/Tableau for exec summaries, with risk heatmaps and trend analysis."}]}

{"doc_id":"ch-000","chunk_id":"ch-000:0","title":"Cyber Hygiene Program Overview","text":"Establish an org-wide cyber hygiene program covering secure configuration management, patching, vulnerability management, compliance, awareness, continuous improvement, and metrics. Scope: cloud (AWS), Kubernetes, endpoints, CI/CD.","metadata":{"domain":["governance"],"owner":"SecOps","standard":["NIST CSF","CIS Controls"],"project":"GP-Copilot","lang":"en","created_at":"2025-10-07T00:00:00Z"}}
{"doc_id":"ch-010","chunk_id":"ch-010:0","title":"Secure Configuration Management—Policy","text":"Maintain golden baselines (CIS AWS, CIS Kubernetes). Enforce via IaC policy-as-code (Conftest/OPA), AWS Config rules, and Gatekeeper. All drift must be detected within 24h and remediated or ticketed with risk acceptance.","metadata":{"domain":["config"],"standard":["CIS AWS 2.0","CIS K8s"],"control_id":["CFG-01","CFG-02"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-011","chunk_id":"ch-011:0","title":"Secure Configuration—Implementation Steps","text":"1) Define baselines per platform. 2) Codify controls in Terraform+Conftest, Gatekeeper templates, AWS Config managed rules. 3) Enable drift detection (Config, kube-audit + Gatekeeper audit). 4) Auto-create Jira tickets with severity by impacted control.","metadata":{"domain":["config"],"standard":["CIS","NIST PR.IP-1"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-020","chunk_id":"ch-020:0","title":"Patching Strategy—Policy","text":"Critical patches (CVSS 9.0+) within 72h, High within 7 days, Medium within 30 days. Maintenance windows per environment; emergency change path for zero-days. Coverage includes EC2 via SSM Patch Manager, container images (ECR), OS packages in nodes, and base images in CI.","metadata":{"domain":["patching"],"standard":["CIS","NIST PR.IP-12"],"control_id":["PAT-01"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-021","chunk_id":"ch-021:0","title":"Patching—Implementation","text":"Enable SSM Patch Manager with patch baselines and compliance reports; integrate with EventBridge for auto-remediation. For containers, run nightly image rebuilds + Trivy scan, block deployment on critical vulns; rotate AMIs monthly or on zero-day.","metadata":{"domain":["patching"],"tool":["SSM","Trivy","ECR"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-030","chunk_id":"ch-030:0","title":"Vulnerability Management—Lifecycle","text":"Identify (Trivy/ECR, Inspector, Snyk), Triage (risk = CVSS * exploitability * exposure), Remediate (PR with fix/patch), Verify (re-scan), Report (trend + SLA). Exceptions require time-bound risk acceptance and compensating controls.","metadata":{"domain":["vuln"],"standard":["NIST DE.CM-8","RS.MI-3"],"control_id":["VM-01","VM-02"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-031","chunk_id":"ch-031:0","title":"Vulnerability Management—Queues & SLAs","text":"Create queues per product/team. Auto-route findings with labels (service, env, severity). SLA: Critical 72h, High 7d, Medium 30d, Low 90d. Measure backlog age, reopen rate, mean time to remediate (MTTR).","metadata":{"domain":["vuln"],"metric":["MTTR","BacklogAge"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-040","chunk_id":"ch-040:0","title":"Compliance & Auditing—Process","text":"Map controls to frameworks (CIS AWS, SOC2, NIST CSF). Quarterly control testing, monthly evidence capture (screenshots/CLI outputs/hashes), and audit trails (CloudTrail, OPA decision logs). Track gaps with remediation plans and owners.","metadata":{"domain":["compliance"],"standard":["SOC2","NIST CSF","CIS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-041","chunk_id":"ch-041:0","title":"Compliance—Evidence Catalog","text":"Evidence types: config snapshots (Terraform plan JSON), AWS Config compliance summaries, Security Hub findings trend, Gatekeeper audit violations, CI logs for Conftest, training rosters, policy sign-offs. Store in versioned S3 with retention.","metadata":{"domain":["compliance"],"storage":["S3","Athena"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-050","chunk_id":"ch-050:0","title":"Training & Awareness—Program","text":"Role-based training: Developers (secure coding, secrets), Ops (hardening, patching), Analysts (triage), Managers (risk). Quarterly phishing simulations. KPIs: completion rate ≥98%, phishing fail rate ↓ quarter-over-quarter, time-to-report phishing ↓.","metadata":{"domain":["training"],"metric":["Completion","PhishFail","TTR"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-060","chunk_id":"ch-060:0","title":"Continuous Improvement—Loop","text":"Run monthly ‘control effectiveness’ reviews using metrics; perform post-incident reviews with action items; update baselines, policies, and runbooks. Feed lessons learned into new Gatekeeper/Conftest rules and CI checks.","metadata":{"domain":["improvement"],"standard":["NIST ID.IM"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-070","chunk_id":"ch-070:0","title":"Metrics & Reporting—Definitions","text":"Core KPIs: Patch Compliance % (by env), MTTR by severity, % Assets Scanned, Open Criticals > SLA, Config Drift Count, Gatekeeper Violation Trend, Secrets Leakage Incidents, Phishing Failure %, Security Hub Posture Score.","metadata":{"domain":["metrics"],"metric":["PatchCompliance","MTTR","Drift","Violations","PostureScore"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-071","chunk_id":"ch-071:0","title":"Metrics—Queries & Sources","text":"Sources: Security Hub, AWS Config, SSM Patch, ECR/Trivy reports, Gatekeeper audit, CI results, training LMS. Aggregate to a warehouse (Athena or ClickHouse) for dashboards. Set SLOs and Page when posture dips below thresholds.","metadata":{"domain":["metrics"],"tool":["SecurityHub","Config","SSM","Athena"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-080","chunk_id":"ch-080:0","title":"Security Architecture & Design—Review Checklist","text":"Threat model (STRIDE) done; network segmentation (private subnets, SG allow-list); IAM least privilege; secrets via AWS Secrets Manager; encryption at rest/in transit; logging/telemetry; break-glass; cost of failure; rollback path.","metadata":{"domain":["architecture"],"standard":["Well-Architected","CIS"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-081","chunk_id":"ch-081:0","title":"Security Architecture—Design Patterns","text":"Patterns: VPC with endpoints (no public S3), ALB+WAF, EKS with IRSA and PSS restricted, OPA Gatekeeper admission, ECR image signing, SSM Session Manager (no SSH), least-priv IAM roles, per-service KMS keys.","metadata":{"domain":["architecture"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-090","chunk_id":"ch-090:0","title":"Runbook—Critical Vulnerability (72h)","text":"1) Intake finding (auto). 2) Confirm exposure and exploitability. 3) Freeze deployments or apply feature flags. 4) Patch/update image or AMI; rebuild/redeploy. 5) Validate via re-scan. 6) Communicate status; 7) Close with evidence.","metadata":{"domain":["vuln","runbook"],"sla":"72h","project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-091","chunk_id":"ch-091:0","title":"Runbook—Zero-Day Emergency Patch","text":"Create emergency CAB; pull vendor guidance; isolate blast radius (SGs, WAF rules); disable risky features; patch subset (canary); scale; monitor; full rollout; retrospective; update baselines and OPA/Conftest rules.","metadata":{"domain":["patching","runbook"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-100","chunk_id":"ch-100:0","title":"30/60/90 Plan—Cyber Hygiene Lead","text":"30d: inventory assets, enable baseline metrics/dashboards, ship first Gatekeeper+Conftest checks. 60d: patch SLAs live, vuln queues with auto-routing, evidence catalog baseline. 90d: posture SLOs enforced, quarterly audit cadence, training >98% completion.","metadata":{"domain":["execution"],"project":"GP-Copilot","lang":"en"}}
{"doc_id":"ch-110","chunk_id":"ch-110:0","title":"RACI Matrix—Key Functions","text":"Config mgmt (R: SecEng, A: CISO, C: Platform, I: App teams); Patching (R: Platform, A: Eng Mgr, C: SecEng, I: PMO); Vuln mgmt (R: SecEng, A: CISO, C: App Leads, I: Audit); Training (R: GRC, A: CISO, C: HR, I: Eng).","metadata":{"domain":["governance"],"project":"GP-Copilot","lang":"en"}}


{"entity_id":"ent:ConfigBaseline","type":"Control","label":"Configuration Baseline","aliases":["Baseline"],"source_doc_id":"ch-010","attrs":{"framework":"CIS"}}
{"entity_id":"ent:PatchSLA","type":"Policy","label":"Patch SLA","aliases":["SLA"],"source_doc_id":"ch-020","attrs":{"critical_hrs":72,"high_days":7}}
{"entity_id":"ent:VulnLifecycle","type":"Process","label":"Vulnerability Lifecycle","aliases":["VM Process"],"source_doc_id":"ch-030"}
{"entity_id":"ent:ComplianceAudit","type":"Process","label":"Compliance & Auditing","aliases":["Audit"],"source_doc_id":"ch-040"}
{"entity_id":"ent:TrainingProgram","type":"Program","label":"Security Training","aliases":["Awareness"],"source_doc_id":"ch-050"}
{"entity_id":"ent:ImprovementLoop","type":"Process","label":"Continuous Improvement","aliases":["CIP"],"source_doc_id":"ch-060"}
{"entity_id":"ent:MetricsSuite","type":"Artifact","label":"Security Metrics & Dashboards","aliases":["KPIs"],"source_doc_id":"ch-070"}
{"entity_id":"ent:SecArchPattern","type":"Pattern","label":"Security Architecture Patterns","aliases":["Design Patterns"],"source_doc_id":"ch-081"}
{"entity_id":"ent:ConfigBaseline","type":"Control","label":"Configuration Baseline","aliases":["Baseline"],"source_doc_id":"ch-010","attrs":{"framework":"CIS"}}
{"entity_id":"ent:PatchSLA","type":"Policy","label":"Patch SLA","aliases":["SLA"],"source_doc_id":"ch-020","attrs":{"critical_hrs":72,"high_days":7}}
{"entity_id":"ent:VulnLifecycle","type":"Process","label":"Vulnerability Lifecycle","aliases":["VM Process"],"source_doc_id":"ch-030"}
{"entity_id":"ent:ComplianceAudit","type":"Process","label":"Compliance & Auditing","aliases":["Audit"],"source_doc_id":"ch-040"}
{"entity_id":"ent:TrainingProgram","type":"Program","label":"Security Training","aliases":["Awareness"],"source_doc_id":"ch-050"}
{"entity_id":"ent:ImprovementLoop","type":"Process","label":"Continuous Improvement","aliases":["CIP"],"source_doc_id":"ch-060"}
{"entity_id":"ent:MetricsSuite","type":"Artifact","label":"Security Metrics & Dashboards","aliases":["KPIs"],"source_doc_id":"ch-070"}
{"entity_id":"ent:SecArchPattern","type":"Pattern","label":"Security Architecture Patterns","aliases":["Design Patterns"],"source_doc_id":"ch-081"}
{"entity_id":"ent:CriticalVulnRunbook","type":"Runbook","label":"Critical Vuln Runbook","aliases":["72h Runbook"],"source_doc_id":"ch-090"}
{"entity_id":"ent:ZeroDayRunbook","type":"Runbook","label":"Zero-Day Patch Runbook","aliases":["Emergency Patch"],"source_doc_id":"ch-091"}
{"entity_id":"ent:RACI","type":"Governance","label":"RACI Matrix","aliases":["RACI"],"source_doc_id":"ch-110"}


{"head":"ent:ConfigBaseline","relation":"reduces","tail":"ent:VulnLifecycle","evidence":{"doc_id":"ch-011","chunk_id":"ch-011:0"},"confidence":0.9}
{"head":"ent:PatchSLA","relation":"constrains","tail":"ent:VulnLifecycle","evidence":{"doc_id":"ch-020","chunk_id":"ch-020:0"},"confidence":0.92}
{"head":"ent:MetricsSuite","relation":"measures","tail":"ent:PatchSLA","evidence":{"doc_id":"ch-070","chunk_id":"ch-070:0"},"confidence":0.9}
{"head":"ent:ComplianceAudit","relation":"verifies","tail":"ent:ConfigBaseline","evidence":{"doc_id":"ch-040","chunk_id":"ch-040:0"},"confidence":0.9}
{"head":"ent:TrainingProgram","relation":"enables","tail":"ent:ConfigBaseline","evidence":{"doc_id":"ch-050","chunk_id":"ch-050:0"},"confidence":0.85}
{"head":"ent:ImprovementLoop","relation":"updates","tail":"ent:SecArchPattern","evidence":{"doc_id":"ch-060","chunk_id":"ch-060:0"},"confidence":0.86}
{"head":"ent:CriticalVulnRunbook","relation":"implements","tail":"ent:PatchSLA","evidence":{"doc_id":"ch-090","chunk_id":"ch-090:0"},"confidence":0.9}
{"head":"ent:ZeroDayRunbook","relation":"implements","tail":"ent:PatchSLA","evidence":{"doc_id":"ch-091","chunk_id":"ch-091:0"},"confidence":0.9}
{"head":"ent:RACI","relation":"governs","tail":"ent:VulnLifecycle","evidence":{"doc_id":"ch-110","chunk_id":"ch-110:0"},"confidence":0.85}
{"head":"ent:MetricsSuite","relation":"measures","tail":"ent:SecArchPattern","evidence":{"doc_id":"ch-071","chunk_id":"ch-071:0"},"confidence":0.84}
