{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are the core concepts of Kubernetes security?"},{"role":"assistant","content":"Kubernetes security follows the 4C model: Control Plane Security, Workload Security, Network Policies, and Supply Chain Security.\n\n- **Control Plane**: Secure etcd (TLS encryption), API server (RBAC, audit logs), scheduler/controller manager.\n- **Workload**: Pod security standards (PSS), least privilege, immutability.\n- **Network**: NetworkPolicies for segmentation, CNI plugins like Calico.\n- **Supply Chain**: Image scanning (Trivy), signing (Cosign).\n\nFor CKS: Understand CIS benchmarks (e.g., 1.2.15 Enable audit logs). Practice with kube-bench tool. Reference: CNCF Kubernetes Security docs (kubernetes.io/docs/concepts/security/overview)."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"How do I harden the Kubernetes API server?"},{"role":"assistant","content":"Harden API server by enabling authentication, authorization, and encryption.\n\nSteps:\n1. Use `--tls-cert-file` and `--tls-private-key-file` for HTTPS.\n2. Enable RBAC: `--authorization-mode=RBAC`.\n3. Disable insecure port: `--secure-port=6443` and remove `--insecure-bind-address`.\n4. Audit logging: `--audit-policy-file` with advanced policy.\n\nExample kube-apiserver flags in manifest:\n```yaml\nspec:\n  containers:\n  - args:\n    - --authorization-mode=RBAC\n    - --audit-policy-file=/etc/kubernetes/audit-policy.yaml\n```\n\nCKS tip: Test with `kubectl auth can-i` and `kube-bench`. Cite: CIS Kubernetes Benchmark v1.9.0."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Explain RBAC in Kubernetes with an example."},{"role":"assistant","content":"RBAC (Role-Based Access Control) manages permissions via Roles/ClusterRoles, RoleBindings/ClusterRoleBindings.\n\n- **Role**: Namespace-scoped permissions.\n- **ClusterRole**: Cluster-wide.\n- **Bindings**: Assign subjects (users/groups/SAs).\n\nExample: Grant a service account read access to pods in default namespace.\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: pod-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: read-pods-binding\nsubjects:\n- kind: ServiceAccount\n  name: my-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: pod-reader\n  apiGroup: rbac.authorization.k8s.io\n```\n\nCKS: Audit with `kubectl auth can-i --list`. Ref: kubernetes.io/docs/reference/access-authn-authz/rbac/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"What is Pod Security Standards (PSS)?"},{"role":"assistant","content":"PSS replaces deprecated PodSecurityPolicies (PSP) for enforcing security contexts on pods.\n\nThree profiles:\n- **Privileged**: No restrictions (avoid).\n- **Baseline**: Disallow privilege escalation, root users.\n- **Restricted**: Immutable fields, non-root, read-only FS.\n\nApply via namespace labels:\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: secure-ns\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: baseline\n    pod-security.kubernetes.io/warn: privileged\n```\n\nCKS prep: Migrate PSP to PSS using `kubectl convert`. Test violations. Source: kubernetes.io/docs/concepts/security/pod-security-standards/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to implement network policies in Kubernetes?"},{"role":"assistant","content":"NetworkPolicies control traffic between pods using labels/selectors.\n\nRequires CNI like Calico/Weave.\n\nExample: Allow ingress from frontend to backend on port 8080.\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: backend-access\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: backend\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: frontend\n    ports:\n    - protocol: TCP\n      port: 8080\n```\n\nCKS: Deny all by default with `egress: []`. Verify with `kubectl exec` traffic tests. Ref: kubernetes.io/docs/concepts/services-networking/network-policies/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices for secrets management in Kubernetes."},{"role":"assistant","content":"Avoid hardcoding secrets; use Kubernetes Secrets or external vaults.\n\nBest practices:\n- Encrypt at rest: `--encryption-provider-config` for etcd.\n- Use external tools: HashiCorp Vault, AWS Secrets Manager.\n- RBAC: Limit access with Roles.\n- Rotate regularly.\n\nExample Secret:\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: db-secret\ntype: Opaque\ndata:\n  password: <base64-encoded>\n```\nMount in pod: `volumeMounts: - name: secret-vol mountPath: /etc/secrets`.\n\nCKS: Integrate Vault with CSI driver. Audit with `kube-audit`. Source: kubernetes.io/docs/concepts/configuration/secret/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to audit Kubernetes clusters for security?"},{"role":"assistant","content":"Auditing tracks API requests via kube-apiserver logs.\n\nSteps:\n1. Enable audit policy: Create `audit-policy.yaml` with levels (Metadata, Request, RequestResponse).\n2. Apply: `--audit-policy-file=/etc/kubernetes/audit-policy.yaml`.\n3. Collect logs: Use Fluentd/ELK stack.\n4. Tools: kube-bench (CIS), Falco (runtime).\n\nExample policy snippet:\n```yaml\napiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- level: Metadata\n  resources:\n  - group: ''\n    resources: [\"pods\"]\n```\n\nCKS: Run `kube-bench run --benchmark cis-1.6` and fix findings. Ref: kubernetes.io/docs/tasks/debug/debug-cluster/audit/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Troubleshoot a RBAC permission denied error."},{"role":"assistant","content":"RBAC 'forbidden' errors occur due to missing bindings.\n\nTroubleshooting:\n1. Check user/SA: `kubectl auth can-i get pods --as=system:serviceaccount:ns:sa`.\n2. List bindings: `kubectl get rolebindings,clusterrolebindings -n <ns>`.\n3. Describe resource: `kubectl describe pod <name>` for events.\n4. Audit logs: Grep for 'authorization' in API server logs.\n5. Test: Create minimal Role and bind.\n\nExample fix: Add verb to Role rules.\n\nCKS tip: Use `--dry-run=server` to simulate. Source: kubernetes.io/docs/reference/access-authn-authz/authorization-kubernetes/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"What are CKS exam tips for the security section?"},{"role":"assistant","content":"CKS security focuses on hands-on: RBAC, network policies, secrets, runtime security.\n\nTips:\n- Practice in kind/minikube: Set up RBAC for scenarios (e.g., multi-tenant).\n- Know tools: OPA Gatekeeper, Trivy for images, kube-hunter.\n- Time management: 2-hour lab; read questions fully.\n- Common pitfalls: Forgetting namespace in bindings, incorrect selectors.\n- Resources: Killer.sh labs, CNCF CKS curriculum.\n\nExample: For image policy, use admission webhook. Score 66%+ to pass. Ref: training.linuxfoundation.org/certification/certified-kubernetes-security-specialist/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to secure etcd in Kubernetes?"},{"role":"assistant","content":"Etcd stores all cluster data; secure it with:\n\n- **Encryption**: TLS for transport (`--cipher-suites`), at-rest via provider config.\n- **Access**: RBAC, client certs (`--client-cert-auth`).\n- **Backup**: Regular snapshots, off-cluster storage.\n- **Isolation**: Run on dedicated nodes.\n\nExample encryption config:\n```yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: <base64-key>\n```\nApply via `--encryption-provider-config`.\n\nCKS: Test with `etcdctl get /registry/secrets` (should fail without certs). Ref: kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Implement a deny-all network policy."},{"role":"assistant","content":"Deny-all isolates pods until explicit allows.\n\nExample:\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress: []\n  egress: []\n```\n\nThis blocks all traffic. Add allow rules separately.\n\nCKS: Verify with `kubectl run test-pod --image=busybox --rm -it -- nslookup kubernetes.default` (should timeout if DNS blocked). Use Calico for enforcement. Source: kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices for container image security."},{"role":"assistant","content":"Secure images to prevent supply chain attacks.\n\nPractices:\n- Use minimal bases (distroless, alpine).\n- Scan: Trivy/Notary for vulns/signatures.\n- Sign: Cosign for SBOM.\n- Policies: Admission controllers to reject unsigned.\n\nExample Trivy scan:\n```bash\ntrivy image myapp:latest\n```\n\nIn K8s: Use Kyverno/ImagePolicyWebhook.\n\nCKS: Integrate with GitHub Actions for CI scanning. Ref: aquasecurity.github.io/trivy/, cncf.io/projects/cosign/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to use OPA Gatekeeper for policy enforcement?"},{"role":"assistant","content":"OPA Gatekeeper enforces policies via admission webhooks.\n\nInstall: `helm install gatekeeper oci://registry-1.docker.io/openpolicyagent/gatekeeper`.\n\nExample: Require labels on pods.\nConstraintTemplate (Rego):\n```yaml\napiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: reqlabels\nspec:\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package reqlabels\n      violation[...] { ... }  # logic here\n```\nConstraint:\n```yaml\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: pod-labels\nspec:\n  match:\n    kinds: [{apiGroups: [\"\"], kinds: [\"Pod\"]}]\n  parameters:\n    labels: [\"app\"]\n```\n\nCKS: Test denies. Ref: open-policy-agent.github.io/gatekeeper/website/docs/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Troubleshoot pod failing PodSecurity admission."},{"role":"assistant","content":"PSS violations cause pod creation failures.\n\nSteps:\n1. Check events: `kubectl describe pod <name>` (look for 'forbidden' reason).\n2. Validate profile: `kubectl get ns <ns> -o yaml | grep pod-security`.\n3. Fix manifest: Add `securityContext: runAsNonRoot: true` for restricted.\n4. Test: `kubectl apply --dry-run=server -f pod.yaml`.\n\nExample fix:\n```yaml\nspec:\n  securityContext:\n    runAsUser: 1000\n    fsGroup: 2000\n```\n\nCKS: Use `pssauditor` tool. Source: kubernetes.io/docs/tasks/configure-pod-container/translate-config-automated/psp-to-psa/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Exam tip: How to handle runtime security threats?"},{"role":"assistant","content":"Runtime security detects anomalies post-deployment.\n\nTools: Falco (rules for syscalls), Sysdig.\n\nExample Falco rule:\n```yaml\n- rule: Detect shell in container\n  condition: spawned_process and container and proc.name = shell\n  output: Shell spawned in container\n  priority: WARNING\n```\n\nCKS: Install Falco, simulate threats (e.g., `kubectl exec -it pod -- /bin/sh`). Monitor alerts.\nTips: Focus on eBPF for performance; practice 2-3 scenarios in labs.\nRef: falco.org/docs/rules/, sysdig.com/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Secure service accounts in Kubernetes."},{"role":"assistant","content":"Service Accounts (SAs) need least privilege.\n\nPractices:\n- Automount: Disable `automountServiceAccountToken: false`.\n- Tokens: Use projected volumes for short-lived.\n- RBAC: Bind minimal roles.\n\nExample:\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app-sa\n  automountServiceAccountToken: false\n---\napiVersion: v1\nkind: Pod\nspec:\n  serviceAccountName: app-sa\n  volumes:\n  - name: token\n    projected:\n      sources:\n      - serviceAccountToken:\n          path: token\n          expirationSeconds: 7200\n```\n\nCKS: Audit unused SAs with `kubectl get sa -o yaml`. Ref: kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to encrypt Kubernetes secrets at rest?"},{"role":"assistant","content":"Enable etcd encryption for secrets.\n\nSteps:\n1. Create EncryptionConfiguration.yaml with aescbc provider.\n2. Add to apiserver: `--encryption-provider-config=/path/to/config`.\n3. Restart apiserver.\n4. Rotate keys periodically.\n\nExample config:\n```yaml\nkind: EncryptionConfiguration\nresources:\n- providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: <base64-aes-key>\n  - identity: {}\nresources:\n- secrets\n```\n\nVerify: `kubectl get secrets etcd --raw=/registry/secrets` (encrypted).\n\nCKS: Test in minikube. Ref: kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#encrypting-confidential-data-at-rest."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices for Kubernetes hardening checklist."},{"role":"assistant","content":"Follow CIS benchmarks for hardening.\n\nKey items:\n- API: RBAC, audit logs, no anon access.\n- Nodes: SELinux/AppArmor, secure boot.\n- Workloads: No root, resource limits.\n- Network: Default deny policies.\n- Images: Signed, scanned.\n\nTool: kube-bench.\nRun: `kube-bench run --benchmark cis-1.9`.\n\nCKS prep: Remediate top 10 findings; document fixes. Ref: cisecurity.org/benchmark/kubernetes."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Integrate Terraform for secure K8s infrastructure."},{"role":"assistant","content":"Use Terraform to provision secure clusters.\n\nExample module for EKS with security:\n```hcl\nmodule \"eks\" {\n  source  = \"terraform-aws-modules/eks/aws\"\n  cluster_version = \"1.28\"\n  cluster_encryption_config = {\n    resources = [\"secrets\"]\n  }\n  # RBAC via addons\n}\nresource \"aws_iam_role_policy_attachment\" \"eks_admin\" {\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\"\n  role       = module.eks.cluster_iam_role_name\n}\n```\n\nBest: Use tfsec for scanning, variables for secrets.\n\nCKS: Apply manifests post-provision. Ref: registry.terraform.io/modules/terraform-aws-modules/eks/aws."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Use Ansible to enforce Kubernetes security policies."},{"role":"assistant","content":"Ansible automates config and compliance.\n\nExample playbook for RBAC:\n```yaml\n---\n- name: Apply RBAC\n  hosts: localhost\n  tasks:\n  - name: Create ClusterRole\n    kubernetes.core.k8s:\n      definition:\n        apiVersion: rbac.authorization.k8s.io/v1\n        kind: ClusterRole\n        metadata:\n          name: read-only\n        rules:\n        - apiGroups: [\"\"]\n          resources: [\"pods\"]\n          verbs: [\"get\", \"list\"]\n  vars:\n    ansible_python_interpreter: /usr/bin/python3\n```\n\nRun: `ansible-playbook rbac.yml -i inventory`.\n\nCKS: Use for CIS remediation. Ref: docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Troubleshoot network policy not applying."},{"role":"assistant","content":"Policies may not enforce if CNI lacks support.\n\nSteps:\n1. Check CNI: `kubectl get nodes -o wide` (Calico?).\n2. Validate policy: `kubectl describe networkpolicy <name>`.\n3. Test traffic: `kubectl exec -it src-pod -- curl dst-pod`.\n4. Labels: Ensure podSelector matches.\n5. Logs: CNI daemonset logs.\n\nFix: Add `namespaceSelector` if cross-ns.\n\nCKS: Use `k9s` for visualization. Ref: kubernetes.io/docs/concepts/services-networking/network-policies/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Advanced: Implement zero-trust in Kubernetes."},{"role":"assistant","content":"Zero-trust assumes no implicit trust.\n\nImplement:\n- mTLS: Istio/Cilium for service mesh.\n- Identity: SPIFFE/SPIRE for workloads.\n- Policies: Kyverno for dynamic admission.\n- Monitoring: eBPF (Tetragon) for runtime.\n\nExample Istio policy:\n```yaml\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: default\nspec:\n  mtls:\n    mode: STRICT\n```\n\nCKS: Focus on network/identity sections. Ref: spiffe.io/, istio.io/latest/docs/concepts/security/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to scan images in CI/CD for CKS prep?"},{"role":"assistant","content":"Integrate scanners in pipeline.\n\nExample GitHub Actions with Trivy:\n```yaml\nname: Scan Image\non: [push]\njobs:\n  scan:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: 'myapp:${{ github.sha }}'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n```\n\nThreshold: Fail on critical vulns.\n\nCKS: Use in exam-like pipeline. Ref: github.com/aquasecurity/trivy-action."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Troubleshoot secret not mounting in pod."},{"role":"assistant","content":"Mount issues from perms or refs.\n\nSteps:\n1. Describe pod: Check volumeMounts/events.\n2. Secret exists: `kubectl get secret <name> -o yaml`.\n3. Perms: Add `defaultMode: 0400` in volume.\n4. Namespace match.\n5. Logs: Pod exec for errors.\n\nExample fix:\n```yaml\nspec:\n  volumes:\n  - name: secret-vol\n    secret:\n      secretName: db-secret\n      defaultMode: 0400\n  containers:\n  - volumeMounts:\n    - name: secret-vol\n      mountPath: /secrets\n      readOnly: true\n```\n\nCKS: Test rotation. Ref: kubernetes.io/docs/concepts/configuration/secret/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Concepts: What is runtime class security?"},{"role":"assistant","content":"RuntimeClass selects container runtime (e.g., runc, gVisor, Kata) for pods.\n\nSecurity: Use sandboxes like gVisor for untrusted code.\n\nExample:\n```yaml\napiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  name: gvisor\nhandler: gvisor\n```\nPod:\n```yaml\nspec:\n  runtimeClassName: gvisor\n```\n\nBenefits: Isolates from host kernel.\n\nCKS: Know for workload isolation. Ref: kubernetes.io/docs/concepts/containers/runtime-class/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Hardening nodes against privilege escalation."},{"role":"assistant","content":"Prevent escalation on nodes.\n\n- AppArmor/SELinux: Enforce profiles.\n- Capabilities: Drop ALL, add needed.\n- Sysctls: `kernel.kexec_load_disabled=1`.\n- Noexec mounts for /tmp.\n\nExample DaemonSet for sysctls:\n```yaml\nspec:\n  securityContext:\n    sysctls:\n    - name: kernel.msgmax\n      value: '65536'\n```\n\nCKS: Validate with `psad` or CIS audit. Ref: kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Audit logs: How to forward them to ELK?"},{"role":"assistant","content":"Forward audit logs using Fluentd.\n\nSteps:\n1. Enable audit in apiserver.\n2. Deploy Fluentd DaemonSet.\n3. Config: Match kubernetes.audit to Elasticsearch output.\n\nExample Fluentd config:\n```conf\n<match kubernetes.audit>\n  @type elasticsearch\n  host elasticsearch\n  port 9200\n  logstash_format true\n  index_name logstash-audit\n</match>\n```\n\nCKS: Query in Kibana for anomalies. Ref: kubernetes.io/docs/tasks/debug/debug-cluster/audit-logging/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"RBAC: Create a custom aggregator for multiple roles."},{"role":"assistant","content":"Role aggregation combines rules.\n\nExample ClusterRole with aggregation:\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: aggregated-admin\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.example.com/aggregate-to-admin: 'true'\nrules: []  # auto-populated\n```\n\nLabel base roles: `labels: {rbac.example.com/aggregate-to-admin: 'true'}`.\n\nCKS: Use for scalable perms. Ref: kubernetes.io/docs/reference/access-authn-authz/rbac/#role-aggregation."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Network policies: Allow traffic based on CIDR."},{"role":"assistant","content":"Use ipBlock for external CIDRs.\n\nExample: Allow ingress from 10.0.0.0/24.\n```yaml\nspec:\n  ingress:\n  - ipBlock:\n      cidr: 10.0.0.0/24\n    ports:\n    - port: 80\n  podSelector:\n    matchLabels:\n      app: web\n```\n\nCKS: Combine with podSelector. Ref: kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Secrets: Integrate with external vault like HashiCorp."},{"role":"assistant","content":"Use Vault CSI driver for dynamic secrets.\n\nSteps:\n1. Install Vault, enable Kubernetes auth.\n2. Deploy CSI provider.\n3. Mount as volume.\n\nExample pod:\n```yaml\nspec:\n  volumes:\n  - name: vault-token\n    csi:\n      driver: secrets-store.csi.k8s.io\n      readOnly: true\n      volumeAttributes:\n        secretProviderClass: \"vault-kv\"\n```\nSecretProviderClass:\n```yaml\napiVersion: secrets-store.csi.x-k8s.io/v1\nkind: SecretProviderClass\nmetadata:\n  name: vault-kv\nspec:\n  provider: vault\n  parameters:\n    vaultAddress: \"http://vault:8200\"\n    roleName: \"my-role\"\n    objects: |\n      - objectName: \"db-pass\"\n        objectType: \"secret\"\n        objectVersion: \"latest\"\n```\n\nCKS: Rotate leases. Ref: vaultproject.io/docs/platform/k8s/csi/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Troubleshoot: Why is my pod running as root?"},{"role":"assistant","content":"Root runs if no securityContext.\n\nCheck: `kubectl exec pod -- whoami`.\n\nFix:\n1. Add `runAsUser: 1000`.\n2. PSS enforce restricted.\n3. Image: Use non-root user in Dockerfile (`USER 1000`).\n\nExample:\n```yaml\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    fsGroup: 2000\n  containers:\n  - securityContext:\n      allowPrivilegeEscalation: false\n```\n\nCKS: Audit all pods. Ref: kubernetes.io/docs/tasks/configure-pod-container/security-context/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices: Multi-tenancy security in K8s."},{"role":"assistant","content":"Isolate tenants with namespaces, RBAC, NetworkPolicies.\n\n- Namespaces: ResourceQuotas, LimitRanges.\n- RBAC: Namespace-scoped Roles.\n- Network: Label-based policies.\n- Storage: PV isolation.\n- Monitoring: Per-ns metrics.\n\nExample quota:\n```yaml\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: tenant-quota\n  namespace: team-a\nspec:\n  hard:\n    pods: \"10\"\n    requests.cpu: \"4\"\n```\n\nCKS: Implement IRSA for AWS multi-tenant. Ref: kubernetes.io/docs/concepts/security/multi-tenancy/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Exam tips: Preparing for the CKS lab environment."},{"role":"assistant","content":"CKS lab: 2 hours, browser-based cluster.\n\nTips:\n- Practice offline: Use kind with CKS sim.\n- Commands: Alias `k=kubectl`, vi/nano skills.\n- Scenarios: RBAC fixes, policy creation, runtime detection.\n- Backup: `cp` manifests before edits.\n- Time: 10min setup, allocate per task.\n\nResources: LinuxFoundation labs, YouTube walkthroughs.\nPass: 66%, retake policy 14 days.\nRef: training.linuxfoundation.org/cks."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"How to use Kyverno for policy validation?"},{"role":"assistant","content":"Kyverno is a policy engine using YAML rules.\n\nInstall: `kubectl apply -f https://github.com/kyverno/kyverno/releases/download/v1.12.0/install.yaml`.\n\nExample: Validate pod labels.\n```yaml\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: require-labels\nspec:\n  validationFailureAction: Enforce\n  rules:\n  - name: check-labels\n    match:\n      resources:\n        kinds:\n        - Pod\n    validate:\n      message: 'Label \"app\" is required.'\n      pattern:\n        metadata:\n          labels:\n            app: '?*'\n```\n\nCKS: Compare to Gatekeeper. Ref: kyverno.io/docs/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Advanced troubleshooting: Detect cryptojacking in cluster."},{"role":"assistant","content":"Cryptojacking uses pods for mining.\n\nDetect:\n1. Monitor CPU: Prometheus alerts >80%.\n2. Falco rules: Suspicious binaries (xmrig).\n3. Logs: `kubectl logs` for mining patterns.\n4. Sysdig: eBPF traces.\n\nRemediate: Kill pod, scan images, tighten RBAC.\n\nExample alert:\n```yaml\n- alert: HighCPU\n  expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8\n```\n\nCKS: Simulate with malicious pod. Ref: falco.org/docs/reference/rules/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Integrate Ansible with Terraform for K8s security."},{"role":"assistant","content":"Terraform provisions infra, Ansible configures.\n\nWorkflow: TF outputs cluster details to Ansible vars.\n\nExample TF:\n```hcl\noutput \"kubeconfig\" {\n  value = module.eks.kubeconfig\n}\n```\nAnsible vars_from_tf.yml, then playbook for security (e.g., apply RBAC YAMLs).\n\nRun: `terraform apply && ansible-playbook -i tf-outputs site.yml`.\n\nCKS: Secure EKS/GKE setups. Ref: terraform.io/docs, ansible.com/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Best practices for backup and disaster recovery security."},{"role":"assistant","content":"Secure backups to prevent data leaks.\n\n- Encrypt: Use KMS for etcd snapshots.\n- Access: RBAC for velero/backup tools.\n- Offsite: S3 with versioning/IAM.\n- Test: Quarterly restores.\n\nExample Velero:\n```yaml\napiVersion: velero.io/v1\nkind: Backup\nmetadata:\n  name: daily-backup\nspec:\n  storageLocation: default\n  includedNamespaces:\n  - \"*\"\n  ttl: 30d\n```\n\nCKS: Include secrets in backups. Ref: velero.io/docs/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Concepts: Explain admission controllers."},{"role":"assistant","content":"Admission controllers validate/mutate requests pre-API persistence.\n\nTypes: Validating (deny), Mutating (modify).\nBuilt-in: NamespaceLifecycle, LimitRanger.\nCustom: Webhooks (e.g., Gatekeeper).\n\nChain: Dynamic + static.\n\nExample webhook config:\n```yaml\napiVersion: apiserver.config.k8s.io/v1\nwebhooks:\n- name: validation.example.com\n  clientConfig:\n    service:\n      name: validator\n      namespace: default\n  rules:\n  - operations: [\"CREATE\"]\n    apiGroups: [\"\"]\n    apiVersions: [\"v1\"]\n    resources: [\"pods\"]\n```\n\nCKS: Disable unused. Ref: kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Hardening: Secure the kubelet component."},{"role":"assistant","content":"Kubelet runs on nodes; secure with:\n\n- Auth: `--kubeconfig`, `--client-ca-file`.\n- TLS: `--tls-cert-file`.\n- Anon: `--anonymous-auth=false`.\n- ReadOnly: `--read-only-port=0`.\n- Protect: `--protect-kernel-defaults=true`.\n\nExample flags in kubelet-config.yaml:\n```yaml\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\nauthorization:\n  mode: Webhook\n```\n\nCKS: Verify with `ps aux | grep kubelet`. Ref: kubernetes.io/docs/reference/command-line-tools-reference/kubelet/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Auditing: Set up advanced audit policy."},{"role":"assistant","content":"Advanced policy logs RequestResponse for sensitive ops.\n\nExample audit-policy.yaml:\n```yaml\napiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- name: secrets-request\n  level: RequestResponse\n  resources:\n  - group: ''\n    resources: [\"secrets\"]\n- name: default\n  level: Metadata\n  nonResourceURLs: [\"*\"]\n```\nApply: `--audit-policy-file=/etc/audit-policy.yaml`.\n\nOmit stages: RequestReceived, ResponseComplete.\n\nCKS: Tail logs during tests. Ref: kubernetes.io/docs/tasks/debug-application-cluster/audit/."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"RBAC: Audit and clean up unused bindings."},{"role":"assistant","content":"Unused RBAC bloats and risks exposure.\n\nAudit:\n1. `kubectl get clusterrolebindings,rolebindings --all-namespaces -o json | jq '.items[] | select(.subjects==[])'`.\n2. Tools: rbac-lookup, polaris.\n3. Delete: `kubectl delete clusterrolebinding unused`.\n\nScript example:\n```bash\nkubectl get clusterroles -o name | xargs -I {} kubectl get clusterrolebindings --all-namespaces -l roleRef.name={} | grep -v \"No resources\"\n```\n\nCKS: Run pre-exam cleanup. Ref: github.com/fission/rbac-lookup."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Network policies: Egress control examples."},{"role":"assistant","content":"Egress limits outbound traffic.\n\nExample: Allow only to specific domains (requires CNI support).\n```yaml\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - ipBlock:\n        cidr: 0.0.0.0/0\n    ports:\n    - port: 443  # HTTPS only\n    to:\n    - namespaceSelector:\n        matchLabels:\n          name: monitoring\n```\n\nFor DNS: Use Calico EgressGateway.\n\nCKS: Test with `wget`. Ref: docs.projectcalico.org/security/calico-network-policy."}]}
{"messages":[{"role":"system","content":"You are an expert in Kubernetes security and Certified Kubernetes Security Specialist (CKS) exam preparation. Provide accurate, concise explanations and examples."},{"role":"user","content":"Secrets management: Rotate certificates automatically."},{"role":"assistant","content":"Use cert-manager for auto-rotation.\n\nInstall: `kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml`.\n\nExample Issuer and Certificate:\n```yaml\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: admin@example.com\n    privateKeySecretRef:\n      name: letsencrypt\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: tls-secret\nspec:\n  secretName: tls-secret\n  issuerRef:\n    name: letsencrypt\n    kind: ClusterIssuer\n  commonName: example.com\n  dnsNames:\n  - example.com\n  duration: 2160h  # 90d\n  renewBefore: 360h  # 15d\n```\n\nCKS: Monitor with webhooks. Ref: cert-manager.io/docs/."}]}

{"entity_id":"ent:IAM","type":"Service","label":"AWS Identity and Access Management","aliases":["IAM"],"source_doc_id":"awss-000","attrs":{"domain":"authz"}}
{"entity_id":"ent:SCP","type":"Control","label":"Service Control Policy","aliases":["SCP"],"source_doc_id":"awss-003"}
{"entity_id":"ent:KMS","type":"Service","label":"AWS Key Management Service","aliases":["KMS"],"source_doc_id":"awss-007"}
{"entity_id":"ent:S3","type":"Service","label":"Amazon S3","aliases":["S3"],"source_doc_id":"awss-009"}
{"entity_id":"ent:GuardDuty","type":"Service","label":"Amazon GuardDuty","aliases":[],"source_doc_id":"awss-011"}
{"entity_id":"ent:SecurityHub","type":"Service","label":"AWS Security Hub","aliases":[],"source_doc_id":"awss-011"}
{"entity_id":"ent:CloudTrail","type":"Service","label":"AWS CloudTrail","aliases":[],"source_doc_id":"awss-012"}
{"entity_id":"ent:VPCFlowLogs","type":"Feature","label":"VPC Flow Logs","aliases":[],"source_doc_id":"awss-013"}
{"entity_id":"ent:WAF","type":"Service","label":"AWS WAF","aliases":["WAF"],"source_doc_id":"awss-014"}
{"entity_id":"ent:ECR","type":"Service","label":"Amazon ECR","aliases":["ECR"],"source_doc_id":"awss-015"}
{"entity_id":"ent:EKS","type":"Service","label":"Amazon EKS","aliases":["EKS"],"source_doc_id":"awss-016"}
{"entity_id":"ent:Config","type":"Service","label":"AWS Config","aliases":[],"source_doc_id":"awss-018"}
{"entity_id":"ent:SSM","type":"Service","label":"AWS Systems Manager","aliases":["SSM"],"source_doc_id":"awss-019"}
{"entity_id":"ent:RDS","type":"Service","label":"Amazon RDS","aliases":[],"source_doc_id":"awss-021"}


{"head":"ent:SCP","relation":"restricts","tail":"ent:IAM","evidence":{"doc_id":"awss-003","chunk_id":"awss-003:0"},"confidence":0.97}
{"head":"ent:KMS","relation":"encrypts","tail":"ent:S3","evidence":{"doc_id":"awss-007","chunk_id":"awss-007:0"},"confidence":0.95}
{"head":"ent:GuardDuty","relation":"feeds","tail":"ent:SecurityHub","evidence":{"doc_id":"awss-011","chunk_id":"awss-011:0"},"confidence":0.94}
{"head":"ent:CloudTrail","relation":"logs","tail":"ent:IAM","evidence":{"doc_id":"awss-012","chunk_id":"awss-012:0"},"confidence":0.93}
{"head":"ent:VPCFlowLogs","relation":"observes","tail":"ent:EKS","evidence":{"doc_id":"awss-013","chunk_id":"awss-013:0"},"confidence":0.9}
{"head":"ent:WAF","relation":"protects","tail":"ent:S3","evidence":{"doc_id":"awss-014","chunk_id":"awss-014:0"},"confidence":0.88}
{"head":"ent:ECR","relation":"supplies","tail":"ent:EKS","evidence":{"doc_id":"awss-015","chunk_id":"awss-015:0"},"confidence":0.9}
{"head":"ent:Config","relation":"evaluates","tail":"ent:S3","evidence":{"doc_id":"awss-018","chunk_id":"awss-018:0"},"confidence":0.9}
{"head":"ent:SSM","relation":"replaces","tail":"ent:IAM","evidence":{"doc_id":"awss-019","chunk_id":"awss-019:0"},"confidence":0.86}
{"head":"ent:RDS","relation":"stores","tail":"ent:S3","evidence":{"doc_id":"awss-021","chunk_id":"awss-021:0"},"confidence":0.84}


{"doc_id":"awsn-000","chunk_id":"awsn-000:0","title":"VPC Core Components","text":"A VPC is a virtual network with subnets, route tables, internet gateways (IGW), NAT gateways, and endpoints. Public subnets route 0.0.0.0/0 to an IGW. Private subnets route 0.0.0.0/0 to a NAT gateway for egress without inbound exposure.","metadata":{"source":"author","topic":["aws","vpc","subnets"],"section":"vpc-basics","project":"GP-Copilot","lang":"en","created_at":"2025-10-07T14:00:00Z"}}
{"doc_id":"awsn-001","chunk_id":"awsn-001:0","title":"Subnetting Strategy","text":"Pick a large non-overlapping CIDR (e.g., 10.0.0.0/16). Carve /24 per AZ for public and private tiers. Reserve space for future expansion and IPv6 dual-stack with /56 assignments per VPC.","metadata":{"source":"author","topic":["aws","cidr","subnetting"],"section":"vpc-design","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-002","chunk_id":"awsn-002:0","title":"Route Tables","text":"Each subnet associates to a single route table. Public subnets have a default route to IGW. Private app subnets have default route to NAT gateway. Data subnets may have only VPC endpoints and no egress route.","metadata":{"source":"author","topic":["aws","routes"],"section":"vpc-basics","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-003","chunk_id":"awsn-003:0","title":"Security Groups vs NACLs","text":"Security groups are stateful, attached to ENIs, evaluated before NACLs. NACLs are stateless, subnet-level, require explicit rules for both directions. Prefer SGs for most filtering; use NACLs for coarse subnet guardrails.","metadata":{"source":"author","topic":["aws","sg","nacl"],"section":"security","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-004","chunk_id":"awsn-004:0","title":"VPC Endpoints: Interface vs Gateway","text":"Interface endpoints create ENIs for AWS services and support PrivateLink. Gateway endpoints support S3/DynamoDB and route via route tables. Use endpoint policies to restrict access to specific resources and principals.","metadata":{"source":"author","topic":["aws","privatelink","endpoints"],"section":"connectivity","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-005","chunk_id":"awsn-005:0","title":"ALB vs NLB vs GWLB","text":"ALB is L7 with host/path routing and WAF integration. NLB is L4 with ultra-low latency and static IPs. GWLB is for transparent insertion of appliances (IDS/IPS). Choose based on protocol, latency, and feature needs.","metadata":{"source":"author","topic":["aws","elb","alb","nlb","gwlb"],"section":"load-balancing","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-006","chunk_id":"awsn-006:0","title":"Transit Gateway vs VPC Peering","text":"Peering is point-to-point, no transitive routing. Transit Gateway (TGW) is hub-and-spoke with attachments for VPCs and VPN/DX. Use TGW for scale and segmentation via route tables and propagation.","metadata":{"source":"author","topic":["aws","tgw","peering"],"section":"inter-vpc","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-007","chunk_id":"awsn-007:0","title":"Hybrid Connectivity","text":"Site-to-Site VPN provides IPSec tunnels with two tunnels per connection; use BGP for route exchange. Direct Connect offers dedicated links with private VIFs. Combine DX + VPN (HA) with TGW for resilience.","metadata":{"source":"author","topic":["aws","vpn","direct-connect"],"section":"hybrid","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-008","chunk_id":"awsn-008:0","title":"Route 53: Public vs Private DNS","text":"Public hosted zones resolve public names. Private hosted zones are VPC-scoped. Use Route 53 Resolver inbound/outbound endpoints for hybrid DNS between on-prem and AWS.","metadata":{"source":"author","topic":["aws","route53","dns"],"section":"dns","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-009","chunk_id":"awsn-009:0","title":"IPv6 & Egress-Only IGW","text":"IPv6 is globally routable; use security groups and NACLs for control. For outbound-only IPv6, use an egress-only internet gateway instead of NAT (NAT is IPv4-only).","metadata":{"source":"author","topic":["aws","ipv6","egress-only"],"section":"vpc-advanced","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-010","chunk_id":"awsn-010:0","title":"Egress Control Pattern","text":"For strict egress: send default route to NAT, block all except interface/gateway endpoints in route tables and SG egress, and allow only specific FQDNs via proxy or PrivateLink where possible.","metadata":{"source":"author","topic":["aws","egress","control"],"section":"security","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-011","chunk_id":"awsn-011:0","title":"EKS Networking Basics","text":"The VPC CNI assigns pod IPs from subnets. Use prefix delegation to improve pod density. Use cluster endpoint private access and network policies (Cilium/Calico) for microsegmentation.","metadata":{"source":"author","topic":["aws","eks","networking"],"section":"eks","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-012","chunk_id":"awsn-012:0","title":"NAT Gateway Cost & HA","text":"Deploy one NAT gateway per AZ for resilience. Use per-AZ private subnets and route to the same-AZ NAT to avoid cross-AZ data charges. Consider endpoints to reduce NAT traffic.","metadata":{"source":"author","topic":["aws","nat-gateway","costs"],"section":"economics","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-013","chunk_id":"awsn-013:0","title":"VPC Lattice Overview","text":"VPC Lattice provides service-to-service networking with auth, discovery, and traffic management across VPCs and accounts. Useful for microservices without managing mesh infra.","metadata":{"source":"author","topic":["aws","vpc-lattice","services"],"section":"service-networking","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-014","chunk_id":"awsn-014:0","title":"Peering Limits & Gotchas","text":"No overlapping CIDRs; no transitive routing; security groups cannot reference across peering unless using referenced SG rules with specific support. Prefer TGW for complex topologies.","metadata":{"source":"author","topic":["aws","peering","limits"],"section":"inter-vpc","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-015","chunk_id":"awsn-015:0","title":"PrivateLink Patterns","text":"Expose internal services via NLB + Interface Endpoint services (PrivateLink). Consumers connect over endpoints in their VPC without routing or IGW. Restrict with endpoint service permissions and resource policies.","metadata":{"source":"author","topic":["aws","privatelink","nlb"],"section":"connectivity","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-016","chunk_id":"awsn-016:0","title":"High-Level Packet Flow","text":"Source ENI -> Security Group -> NACL -> Route Table -> Gateway/Endpoint -> Target. Return traffic in SGs is statefully allowed; NACLs require symmetric rules.","metadata":{"source":"author","topic":["aws","packet-flow"],"section":"fundamentals","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-017","chunk_id":"awsn-017:0","title":"Multi-Account Networking","text":"Use AWS Organizations, shared services VPCs, and TGW with segmented route tables per environment. Share subnets with AWS RAM only when necessary; prefer isolated VPCs and shared endpoints.","metadata":{"source":"author","topic":["aws","multi-account","tgw"],"section":"architecture","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-018","chunk_id":"awsn-018:0","title":"Ingress via ALB + WAF","text":"Place ALB in public subnets with SG limiting source CIDRs. Target groups in private subnets. Attach WAF for L7 protections; terminate TLS at ALB and re-encrypt to targets as needed.","metadata":{"source":"author","topic":["aws","alb","waf"],"section":"ingress","project":"GP-Copilot","lang":"en"}}
{"doc_id":"awsn-019","chunk_id":"awsn-019:0","title":"DNS in EKS","text":"Use ClusterIP services + CoreDNS within the cluster. For outbound service discovery, combine Route 53 private zones and VPC resolver endpoints. Avoid hairpin through public DNS for internal traffic.","metadata":{"source":"author","topic":["aws","eks","dns"],"section":"eks","project":"GP-Copilot","lang":"en"}}


{"entity_id":"ent:VPC","type":"Concept","label":"Virtual Private Cloud","aliases":["VPC"],"source_doc_id":"awsn-000"}
{"entity_id":"ent:Subnet","type":"Concept","label":"Subnet","aliases":[],"source_doc_id":"awsn-001"}
{"entity_id":"ent:IGW","type":"Gateway","label":"Internet Gateway","aliases":["IGW"],"source_doc_id":"awsn-000"}
{"entity_id":"ent:NATGW","type":"Gateway","label":"NAT Gateway","aliases":["NAT"],"source_doc_id":"awsn-012"}
{"entity_id":"ent:SG","type":"Control","label":"Security Group","aliases":["SG"],"source_doc_id":"awsn-003"}
{"entity_id":"ent:NACL","type":"Control","label":"Network ACL","aliases":["NACL"],"source_doc_id":"awsn-003"}
{"entity_id":"ent:Endpoint","type":"Feature","label":"VPC Endpoint","aliases":["Interface Endpoint","Gateway Endpoint"],"source_doc_id":"awsn-004"}
{"entity_id":"ent:ALB","type":"LoadBalancer","label":"Application Load Balancer","aliases":["ALB"],"source_doc_id":"awsn-005"}
{"entity_id":"ent:NLB","type":"LoadBalancer","label":"Network Load Balancer","aliases":["NLB"],"source_doc_id":"awsn-005"}
{"entity_id":"ent:TGW","type":"Hub","label":"Transit Gateway","aliases":["TGW"],"source_doc_id":"awsn-006"}
{"entity_id":"ent:Route53","type":"Service","label":"Amazon Route 53","aliases":["Route53"],"source_doc_id":"awsn-008"}
{"entity_id":"ent:EgressOnlyIGW","type":"Gateway","label":"Egress-Only Internet Gateway","aliases":[],"source_doc_id":"awsn-009"}
{"entity_id":"ent:VPC-Lattice","type":"Service","label":"VPC Lattice","aliases":["Lattice"],"source_doc_id":"awsn-013"}


{"head":"ent:Subnet","relation":"associates_with","tail":"ent:VPC","evidence":{"doc_id":"awsn-001","chunk_id":"awsn-001:0"},"confidence":0.98}
{"head":"ent:IGW","relation":"provides","tail":"ent:VPC","evidence":{"doc_id":"awsn-000","chunk_id":"awsn-000:0"},"confidence":0.96}
{"head":"ent:NATGW","relation":"egress_for","tail":"ent:Subnet","evidence":{"doc_id":"awsn-012","chunk_id":"awsn-012:0"},"confidence":0.94}
{"head":"ent:SG","relation":"filters","tail":"ent:Endpoint","evidence":{"doc_id":"awsn-004","chunk_id":"awsn-004:0"},"confidence":0.9}
{"head":"ent:NACL","relation":"guards","tail":"ent:Subnet","evidence":{"doc_id":"awsn-003","chunk_id":"awsn-003:0"},"confidence":0.9}
{"head":"ent:TGW","relation":"connects","tail":"ent:VPC","evidence":{"doc_id":"awsn-006","chunk_id":"awsn-006:0"},"confidence":0.95}
{"head":"ent:ALB","relation":"fronts","tail":"ent:Subnet","evidence":{"doc_id":"awsn-018","chunk_id":"awsn-018:0"},"confidence":0.88}
{"head":"ent:NLB","relation":"fronts","tail":"ent:Endpoint","evidence":{"doc_id":"awsn-015","chunk_id":"awsn-015:0"},"confidence":0.88}
{"head":"ent:EgressOnlyIGW","relation":"egress_for","tail":"ent:VPC","evidence":{"doc_id":"awsn-009","chunk_id":"awsn-009:0"},"confidence":0.9}
{"head":"ent:Route53","relation":"resolves","tail":"ent:VPC","evidence":{"doc_id":"awsn-008","chunk_id":"awsn-008:0"},"confidence":0.9}
{"head":"ent:VPC-Lattice","relation":"routes","tail":"ent:VPC","evidence":{"doc_id":"awsn-013","chunk_id":"awsn-013:0"},"confidence":0.86}
